#!/bin/bash
#
# @author Zeus Intuivo <zeus@intuivo.com>
#
#
set -E -o functrace
_debian_flavor_install(){
  # trap  '_trap_on_exit $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  EXIT
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  local -i _err=0
  install_requirements "linux" "
    # Debian Ubuntu only
    network-manager
    libnss3-tools
    jq
    xsel
  "
  verify_is_installed "
    network-manager
    libnss3-tools
    jq
    xsel
    composer
    php
  "
 _valet_steps_php_composer_pecl_valet_install

  return 0
} # end _debian_flavor_install

_package_list_installer() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  local package packages
  packages="${*}"
  local -i _err
  if ! install_requirements "linux" "${packages}" ; then
  {
    warning "installing requirements. ${CYAN} attempting to install one by one"
    while read -r package; do
    {
      [[ -z "${package}" ]] && continue
      if ! install_requirements "linux" "${package}" ; then
      {
        _err=$?
        if [ ${_err} -gt 0 ] ; then
        {
          echo -e "${RED}"
          echo failed to install requirements "${package}"
          echo -e "${RESET}"
        }
        fi
      }
      fi
    }
    done <<< "${packages}"
  }
  fi
} # end _package_list_installer

_valet_steps_php_composer_pecl_valet_install(){

  Checking "$0:$LINENO find php for user"
  PHPS=$(su - "$SUDO_USER" -c 'which php')
  _err=$?
  if [ $_err -gt 0 ] ; then
  {
    warning "I did not find php for user $SUDO_USER - trying as root _err:$_err"
    PHPS=$(which php)
    _err=$?
    if [ $_err -gt 0 ] ; then # failed
    {
      failed "to find php for root either - trying as root _err:$_err"
      exit 1
    }
    fi
  }
  fi

  Checking "$0:$LINENO find composer for user"
  COMPOSERS=$(su - "$SUDO_USER" -c 'which composer')
  _err=$?
  if [ $_err -gt 0 ] ; then
  {
    warning "I did not find composer for user $SUDO_USER - trying as root _err:$_err"
    COMPOSERS=$(which composer)
    _err=$?
    if [ $_err -gt 0 ] ; then # failed
    {
      failed "to find composer for root either - trying as root _err:$_err"
      exit 1
    }
    fi
  }
  fi


  Checking "$0:$LINENO find pecl for user "
  PECLS=$(su - "$SUDO_USER" -c 'which pecl')
  _err=$?
  if [ $_err -gt 0 ] ; then
  {
    warning "I did not find pecl for user $SUDO_USER - trying as root _err:$_err"
    PECLS=$(which pecl)
    _err=$?
    if [ $_err -gt 0 ] ; then # failed
    {
      failed "to find pecl for root either - trying as root _err:$_err"
      exit 1
    }
    fi
  }
  fi


  Installing "$0:$LINENO pecl has to be run as root -  pecl channel-update pecl.php.net"
    if ( "$PECLS" channel-update pecl.php.net ) ; then
    {
      _err=1
    }
    fi
    if [ $_err -gt 0 ] ; then
    {
      warning "to sun  as root also - pecl channel-update pecl.php.net - trying as root _err:$_err"
    }
    fi


  Installing "$0:$LINENO pecl has to be run as root -  pecl  install phalcon"
    if ( "$PECLS" install phalcon ) ; then
    {
      _err=1
    }
    fi
    if [ $_err -gt 0 ] ; then
    {
      warning "to sun  as root also - pecl  install phalcon - trying as root _err:$_err"
    }
    fi

  Installing "$0:$LINENO pecl has to be run as root -  pecl  install psr"
    if ( "$PECLS" install psr ) ; then
    {
      _err=1
    }
    fi
    if [ $_err -gt 0 ] ; then
    {
      warning "to sun  as root also - pecl  install psr - trying as root _err:$_err"
    }
    fi

  Installing "$0:$LINENO pecl has to be run as root -  pecl  install xdebug"
    if ( "$PECLS" install xdebug ) ; then
    {
      _err=1
    }
    fi
    if [ $_err -gt 0 ] ; then
    {
      warning "to sun  as root also - pecl  install xdebug - trying as root _err:$_err"
    }
    fi



  Installing "$0:$LINENO  composer global update "
  ( su - "$SUDO_USER" -c ''"$PHPS"' '"$COMPOSERS"' global update' )
  _err=$?
  if [ $_err -gt 0 ] ; then
  {
    warning "could not run composer as user $SUDO_USER -  composer global update  - or it failed trying as root _err:$_err"
    ( "$PHPS" "$COMPOSERS" global update )
    _err=$?
    if [ $_err -gt 0 ] ; then
    {
      failed "to sun  as root also - composer  global update  - trying as root _err:$_err"
      exit 1
    }
    fi
  }
  fi

  Installing "$0:$LINENO  composer global require cpriego/valet-linux "
  ( su - "$SUDO_USER" -c ''"$PHPS"' '"$COMPOSERS"' global require cpriego/valet-linux' )
  _err=$?
  if [ $_err -gt 0 ] ; then
  {
    warning "could not run composer as user $SUDO_USER -  composer global require cpriego/valet-linux  - or it failed trying as root _err:$_err"
    ( "$PHPS" "$COMPOSERS" global require cpriego/valet-linux )
    _err=$?
    if [ $_err -gt 0 ] ; then
    {
      failed "to sun  as root also - composer  global require cpriego/valet-linux  - trying as root _err:$_err"
      exit 1
    }
    fi
  }
  fi


  Checking "$0:$LINENO find which valet"
  if [[ -f "${USER_HOME}/.config/composer/vendor/bin/valet" ]] ; then
  {
    VALETS="${USER_HOME}/.config/composer/vendor/bin/valet"
  }
  else
  {
    VALETS=$(su - "$SUDO_USER" -c 'which valet')
    _err=$?
    if [ $_err -gt 0 ] ; then
    {
      warning "I did not find valet for user $SUDO_USER - trying as root _err:$_err"
      VALETS=$(which valet)
      _err=$?
      if [ $_err -gt 0 ] ; then # failed
      {
        failed "to find valet for root either - trying as root _err:$_err"
        exit 1
      }
      fi
    }
    fi
  }
  fi



  Installing "$0:$LINENO  valet install "
  ( su - "$SUDO_USER" -c ''"$VALETS"' install' )
  _err=$?
  if [ $_err -gt 0 ] ; then
  {
    warning "could not run valet as user $SUDO_USER -  valet install  - or it failed trying as root _err:$_err"
    ( "$VALETS"  install )
    _err=$?
    if [ $_err -gt 0 ] ; then
    {
      failed "to sun  as root also - valet  install  - trying as root _err:$_err"
      exit 1
    }
    fi
  }
  fi


  Checking "$0:$LINENO valet status "
  ( su - "$SUDO_USER" -c ''"$PHPS"' '"$VALETS"' status' )
  _err=$?
  if [ $_err -gt 0 ] ; then
  {
    warning "could not run valet as user $SUDO_USER -  valet status  - or it failed trying as root _err:$_err"
    ( "$PHPS" "$VALETS"  status )
    _err=$?
    if [ $_err -gt 0 ] ; then
    {
      failed "to sun  as root also - valet  status  - trying as root _err:$_err"
      exit 1
    }
    fi
  }
  fi


  Installing "$0:$LINENO  valet restart "
  ( su - "$SUDO_USER" -c ''"$PHPS"' '"$VALETS"' restart' )
  _err=$?
  if [ $_err -gt 0 ] ; then
  {
    warning "could not run valet as user $SUDO_USER -  valet restart  - or it failed trying as root _err:$_err"
    ( "$PHPS" "$VALETS"  restart )
    _err=$?
    if [ $_err -gt 0 ] ; then
    {
      failed "to sun  as root also - valet  restart  - trying as root _err:$_err"
      exit 1
    }
    fi
  }
  fi

  Checking "$0:$LINENO  valet status "
  ( su - "$SUDO_USER" -c ''"$PHPS"' '"$VALETS"' status' )
  _err=$?
  if [ $_err -gt 0 ] ; then
  {
    warning "could not run valet as user $SUDO_USER -  valet status  - or it failed trying as root _err:$_err"
    ( "$PHPS" "$VALETS"  status )
    _err=$?
    if [ $_err -gt 0 ] ; then
    {
      failed "to sun  as root also - valet  status  - trying as root _err:$_err"
      exit 1
    }
    fi
  }
  fi


  Checking "$0:$LINENO  valet links "
  ( su - "$SUDO_USER" -c ''"$PHPS"' '"$VALETS"' links' )
  _err=$?
  if [ $_err -gt 0 ] ; then
  {
    warning "could not run valet as user $SUDO_USER -  valet links  - or it failed trying as root _err:$_err"
    ( "$PHPS" "$VALETS"  links )
    _err=$?
    if [ $_err -gt 0 ] ; then
    {
      failed "to sun  as root also - valet  links  - trying as root _err:$_err"
      exit 1
    }
    fi
  }
  fi
  passed "$0:$LINENO tasks "
} # end _valet_steps_php_composer_pecl_valet_install

_redhat_flavor_install(){
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  local packages="
    # RedHat Flavor only
    nss-tools
    jq
    xsel
    # fedora 37 _redhat_flavor_install
    php-intl
    php-mbstring
    php-devel
    php-json
    php-cli
    php-xml
    php-common
    php-mysqlnd
    php-gd
    php-curl
    # php-psr
    php-zip
    php-fpm
    php-bcmath
    php-ctype
    php-fileinfo
    php-pdo
    php-tokenizer
    php-gmp
    php-mysqli
    # _redhat_flavor_install
  "
  _package_list_installer "${packages}"
  verify_is_installed "
    # nss-tools
    jq
    xsel
    composer
    php
  "
  setenforce 0
  echo "Permanent:

    Open /etc/selinux/config
    Change SELINUX=enforcing to SELINUX=permissive"

  _valet_steps_php_composer_pecl_valet_install

  return 0
} # end _redhat_flavor_install


_arch_flavor_install() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  echo "_arch_flavor_install Procedure not yet implemented. I don't know what to do."
} # end _readhat_flavor_install

_arch__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _arch_flavor_install
} # end _arch__32

_arch__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _arch_flavor_install
} # end _arch__64

_centos__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _centos__32

_centos__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _centos__64

_debian__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _debian_flavor_install
} # end _debian__32

_debian__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _debian_flavor_install
} # end _debian__64

_fedora__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _fedora__32

_fedora__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _fedora__64

_fedora_37__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  local packages="
    # RedHat Flavor only
    nss-tools
    jq
    xsel
    # fedora 37
    php-intl
    php-mbstring
    php-devel
    php-json
    php-cli
    php-xml
    php-common
    php-mysqlnd
    php-gd
    php-curl
    # php-psr
    php-zip
    php-fpm
    php-bcmath
    php-ctype
    php-fileinfo
    php-pdo
    php-tokenizer
    php-gmp
    php-mysqli
    # fedora 37
  "
  _package_list_installer "${packages}"
  verify_is_installed "
    # nss-tools
    jq
    xsel
    composer
    php
  "
  setenforce 0
  echo "Permanent:

    Open /etc/selinux/config
    Change SELINUX=enforcing to SELINUX=permissive"

  _valet_steps_php_composer_pecl_valet_install

} # end _fedora_37__64

_fedora_39__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  Comment "Based on REF:https://medium.com/@donfiealex/rapid-guide-set-up-php-8-3-on-fedora-linux-39-83bbcc908f2d"
   yes | dnf install https://rpms.remirepo.net/fedora/remi-release-39.rpm
  yes | dnf module reset php
  yes | dnf module enable php:remi-8.3
  local packages="
    # RedHat Flavor only
    nss-tools
    jq
    xsel
    # fedora 39
    php
    php-mysqlnd
    php-intl
    php-mbstring
    php-devel
    php-json
    php-cli
    php-common
    php-gd
    php-curl
    php-zip
    php-fpm
    php-bcmath
    php-ctype
    php-fileinfo
    php-pdo
    php-tokenizer
    php-xml
    php-gmp
    php-mysqli
    # fedora 39
  "
  _package_list_installer "${packages}"
  verify_is_installed "
    # nss-tools
    jq
    xsel
    composer
    php
  "
  if setenforce 0 ; then
  {
    passed "/etc/selinux/config is already SELINUX=permissive"
  }
  else
	{
    echo "Permanent:
    Open /etc/selinux/config
    Change SELINUX=enforcing to SELINUX=permissive
    Change SELINUX=enforcing to SELINUX=disabled
	  "
	}
  fi
  _valet_steps_php_composer_pecl_valet_install

} # end _fedora_39__64

_gentoo__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _gentoo__32

_gentoo__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _gentoo__64

_madriva__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _madriva__32

_madriva__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _madriva__64

_suse__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _suse__32

_suse__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _suse__64

_ubuntu__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _debian_flavor_install
} # end _ubuntu__32

_ubuntu__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _debian_flavor_install
} # end _ubuntu__64

_darwin__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  install_requirements "linux" "
    # RedHat Flavor only
    shtools
    knock
    jq
    xsel
    nginx
    dnsmasq
    php
    composer
  "
  verify_is_installed "
    composer
    php
  "
  su - "${SUDO_USER}" -c 'composer require laravel/valet'
  valet install
  # echo "_darwin__64 Procedure not yet implemented. I don't know what to do."
} # end _darwin__64

_darwin__arm64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _darwin__64
  # echo "_darwin__arm64 Procedure not yet implemented. I don't know what to do."
} # end _darwin__arm64

_tar() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  echo "_tar Procedure not yet implemented. I don't know what to do."
} # end tar

_windows__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  echo "_windows__64 Procedure not yet implemented. I don't know what to do."
} # end _windows__64

_windows__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  echo "_windows__32 Procedure not yet implemented. I don't know what to do."
} # end _windows__32


_main() {
  determine_os_and_fire_action
} # end _main

_main

echo ":)"
