#!/usr/bin/bash


_get_mac_version(){
  # REF: https://superuser.com/questions/75166/how-to-find-out-mac-os-x-version-from-terminal
  # local MAJOR_MAC_VERSION=$(sw_vers -productVersion | awk -F '.' '{print $1 "." $2}')
  ensure sw_vers or "Failed to get info program sw_vers"
  local _version_info="$(sw_vers -productVersion)"
  enforce_parameter_with_value 1 _version_info   "${_version_info}"  "10.14.6"
  local _major=$(cut -d '.' -f 1,2 <<< "${_version_info}")
  enforce_parameter_with_value 2 _major          "${_major}"         "10.14"
  local os_vers=( ${_version_info//./ } )

  local os_vers_major="${os_vers[0]}"
  local os_vers_minor="${os_vers[1]}"
  local os_vers_patch="${os_vers[2]}"
  local os_vers_build=$(sw_vers -buildVersion)

  # Sample semver output
  # echo "${os_vers_major}.${os_vers_minor}.${os_vers_patch}+${os_vers_build}"
  # expected 10.12.6+16G29
  echo "${_major}"
  return 0
} # end _get_mac_version

_install_dmgs_list() {
  Comment start "$0$1" _install_dmgs_list
  local installlist one  target_name target_url target_app app_name extension
  local _major_version1=""
  _major_version1=$(_get_mac_version )
  local _major_version=""
  _major_version=$(_get_mac_version | tail -1 )
  local extension
	enforce_parameter_with_value 1 _major_version   "${_major_version}"  "10.14"
  echo "${_major_version1}"
  echo "_major_version:${_major_version}"
    case "${_major_version}" in
       "13"*) # Ventura 8.0.23 or newer
          installlist="
          mysql-workbench-community-8.0.31-macos-x86_64.dmg|MySQL Workbench community-8.0.31/MySQLWorkbench.app|https://cdn.mysql.com/archives/mysql-workbench/mysql-workbench-community-8.0.31-macos-x86_64.dmg
          "
          ;;
       "12"*) # Monterrey 8.0.23 or newer
          installlist="
          mysql-workbench-community-8.0.31-macos-x86_64.dmg|MySQL Workbench community-8.0.31/MySQLWorkbench.app|https://cdn.mysql.com/archives/mysql-workbench/mysql-workbench-community-8.0.31-macos-x86_64.dmg
          "
          ;;
       "11.1"*) # Big Sur mysql 8.0.23 or newer
          installlist="
          mysql-workbench-community-8.0.31-macos-x86_64.dmg|MySQL Workbench community-8.0.31/MySQLWorkbench.app|https://cdn.mysql.com/archives/mysql-workbench/mysql-workbench-community-8.0.31-macos-x86_64.dmg
          "
          ;;
        "10.15"*) # Catalina mysql 8.0.19 to 8.0.23
          installlist="
          mysql-workbench-community-8.0.22-macos-x86_64.dmg|MySQL Workbench community-8.0.22/MySQLWorkbench.app|https://cdn.mysql.com/archives/mysql-workbench/mysql-workbench-community-8.0.22-macos-x86_64.dmg
          "
          ;;
        "10.14"*) # Mojave mysql 8.0.1, mysql-workbench 8.0.13 to 8.0.21 #  8.0.22 says is 'compatible with Mojave' but Phisical tried on Mojave Mac flags as not
          installlist="
          mysql-workbench-community-8.0.21-macos-x86_64.dmg|MySQL Workbench community-8.0.21/MySQLWorkbench.app|https://cdn.mysql.com/archives/mysql-workbench/mysql-workbench-community-8.0.21-macos-x86_64.dmg
          mysql-8.0.18-macos10.14-x86_64.dmg|mysql-8.0.18-macos10.14-x86_64/mysql-8.0.18-macos10.14-x86_64.pkg|https://cdn.mysql.com/archives/mysql-8.0/mysql-8.0.18-macos10.14-x86_64.dmg
          "
          ;;
        "10.13"*) # High Sierra mysql 8.0.11 rc to 8.0.18
          installlist="
          mysql-workbench-community-8.0.11-macos-x86_64.dmg|MySQL Workbench community-8.0.11/MySQLWorkbench.app|https://cdn.mysql.com/archives/mysql-workbench/mysql-workbench-community-8.0.11-macos-x86_64.dmg
          "
          ;;
        "10.12"*)  # Sierra mysql 6.3.9 to 6.3.10
          installlist="
          mysql-workbench-community-6.3.10-macos-x86_64.dmg|MySQL Workbench community-6.3.10/MySQLWorkbench.app|https://cdn.mysql.com/archives/mysql-workbench/mysql-workbench-community-6.3.10-macos-x86_64.dmg
          "
          ;;
        "10.11"*) # El Capitan mysql 6.3.9 to 6.3.10
          installlist="
          mysql-workbench-community-6.3.9-macos-x86_64.dmg|MySQL Workbench community-6.3.9/MySQLWorkbench.app|https://cdn.mysql.com/archives/mysql-workbench/mysql-workbench-community-6.3.9-macos-x86_64.dmg
          "
          ;;
        "10.10"*) # Yosemite mysql. to 6.3.6
          installlist="
          mysql-workbench-community-6.3.6-macos-x86_64.dmg|MySQL Workbench community-6.3.6/MySQLWorkbench.app|https://cdn.mysql.com/archives/mysql-workbench/mysql-workbench-community-6.3.6-macos-x86_64.dmg
          "
          ;;
        *)
          warning "Platform $OSTYPE not supported"
          installlist="
          mysql-workbench-community-8.0.31-macos-x86_64.dmg|MySQL Workbench community-8.0.31/MySQLWorkbench.app|https://cdn.mysql.com/archives/mysql-workbench/mysql-workbench-community-8.0.31-macos-x86_64.dmg
          "
          ;;
    esac
    Installing "# $installlist"
  # Installer dmg file. |       installer file once mounted. |.  location from url to download  |
  Checking dmgs apps
  while read -r one ; do
  {
    if [[ -n "${one}" ]] ; then
    {

      target_name="$(echo "${one}" | cut -d'|' -f1)"
      # extension="$(echo "${target_name}" | rev | cut -d'.' -f 1 | rev)"
      target_app="$(echo "${one}" | cut -d'|' -f2)"
      app_name="$(basename "${target_app}")"
      target_url="$(echo "${one}" | cut -d'|' -f3-)"
      if [[ -n "${target_name}" ]] ; then
      {
        if [[ -n "${target_url}" ]] ; then
        {
          if [[ ! -d "/Applications/${app_name}" ]] ; then
          {
            Installing "${app_name}"
            _install_dmgs_dmg__64 "${target_name}" "${target_app}" "${target_url}"
          }
          else
          {
            passed  "/Applications/${app_name}"  --skipping already installed
          }
          fi
        }
        fi
      }
      fi
    }
    fi
  }
  done <<< "$(echo "${installlist}" | grep -vE '^#' | grep -vE '^\s+#')"

  Comment end "$0$1 _install_dmgs_list"
  return 0
} # end _install_dmgs_list

_debian_flavor_install() {
  echo "Procedure not yet implemented. I don't know what to do."
} # end _debian_flavor_install

_redhat_flavor_install() {
	dnf build-dep mysql -y
  dnf install mysql-community-server -y
  rpm -qi mysql-community-server
	systemctl start mysqld.service
	systemctl enable mysqld.service
	local tempass="$(grep 'A temporary password' /var/log/mysqld.log |tail -1)"
	local newpass=toor
	Checking "A temporary password is generated for" "root@localhost" ":" "${tempass}" "${newpass}
${newpass}
Yes
Yes
Yes
Yes
Yes
Yes
"
  Installing "Here after you change password run the following
	make password toor for dev for mysql 8

SELECT user,authentication_string,plugin,host FROM mysql.user;
SHOW VARIABLES LIKE 'validate_password%';
SET GLOBAL validate_password.LENGTH = 4;
SET GLOBAL validate_password.policy = 0;
SET GLOBAL validate_password.mixed_case_count = 0;
SET GLOBAL validate_password.number_count = 0;
SET GLOBAL validate_password.special_char_count = 0;
SET GLOBAL validate_password.check_user_name = 0;
ALTER USER 'root'@'localhost' IDENTIFIED BY 'toor';
ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'toor';
FLUSH PRIVILEGES;
SELECT user,authentication_string,plugin,host FROM mysql.user;
SHOW VARIABLES LIKE 'validate_password%';
	"
  mysql_secure_installation <<< "Y
"

  mysql -u root -p "${newpass}"
	Installing "firewall-cmd" for remote connections
	firewall-cmd --add-service=mysql --permanent
	firewall-cmd --reload
	firewall-cmd --permanent --add-rich-rule "rule family=\"ipv4\" service name=\"mysql\" source address=\"10.1.1.0/24\" accept"

	Installing "If you have issues with Laravel and Mysql 8 try this
	// database.php

    'connections' => [

        'mysql' => [
            'driver'      => 'mysql',
            'host'        => env( 'DB_HOST', '127.0.0.1' ),
            'port'        => env( 'DB_PORT', '3306' ),
            'database'    => env( 'DB_DATABASE', 'forge' ),
            'username'    => env( 'DB_USERNAME', 'forge' ),
            'password'    => env( 'DB_PASSWORD', '' ),
            'unix_socket' => env( 'DB_SOCKET', '' ),
            'charset'     => 'utf8mb4',
            'collation'   => 'utf8mb4_unicode_ci',
            'prefix'      => '',
            'strict'      => true,
            'engine'      => null,
            'modes'       => [
                'ONLY_FULL_GROUP_BY',
                'STRICT_TRANS_TABLES',
                'NO_ZERO_IN_DATE',
                'NO_ZERO_DATE',
                'ERROR_FOR_DIVISION_BY_ZERO',
                'NO_ENGINE_SUBSTITUTION',
            ],
        ],
    ],
	"
} # end _redhat_flavor_install

_arch_flavor_install() {
  echo "Procedure not yet implemented. I don't know what to do."
} # end _readhat_flavor_install

_arch__32() {
  _arch_flavor_install
} # end _arch__32

_arch__64() {
  _arch_flavor_install
} # end _arch__64

_centos__32() {
  _redhat_flavor_install
} # end _centos__32

_centos__64() {
  _redhat_flavor_install
} # end _centos__64

_debian__32() {
  _debian_flavor_install
} # end _debian__32

_debian__64() {
  _debian_flavor_install
} # end _debian__64

_fedora__32() {
  _redhat_flavor_install
} # end _fedora__32

_fedora__64() {
  trap "echo Error:$?" ERR INT
  local _parameters="${*-}"
  local -i _err=0
  dnf -y install https://dev.mysql.com/get/mysql80-community-release-fc39-1.noarch.rpm
  _redhat_flavor_install "${_parameters-}"
	_err=$?
	if [ ${_err} -gt 0 ] ; then
  {
    failed "$0:$LINENO while running callsomething above _err:${_err}"
  }
  fi
} # end _fedora__64

_fedora_34__64() {
	trap "echo Error:$?" ERR INT
	local _parameters="${*-}"
	local -i _err=0
	dnf -y install https://dev.mysql.com/get/mysql80-community-release-fc34-3.noarch.rpm
	_redhat_flavor_install "${_parameters-}"
	_err=$?
	if [ ${_err} -gt 0 ] ; then
	{
		failed "$0:$LINENO while running callsomething above _err:${_err}"
	}
	fi
} # end _fedora_34__64

_fedora_35__64() {
  trap "echo Error:$?" ERR INT
  local _parameters="${*-}"
  local -i _err=0
  dnf -y install https://dev.mysql.com/get/mysql80-community-release-fc35-3.noarch.rpm
  _redhat_flavor_install "${_parameters-}"
	_err=$?
	if [ ${_err} -gt 0 ] ; then
  {
    failed "$0:$LINENO while running callsomething above _err:${_err}"
  }
  fi
} # end _fedora_35__64

_fedora_36__64() {
  trap "echo Error:$?" ERR INT
  local _parameters="${*-}"
  local -i _err=0
  dnf -y install https://dev.mysql.com/get/mysql80-community-release-fc36-1.noarch.rpm
  _redhat_flavor_install "${_parameters-}"
	_err=$?
	if [ ${_err} -gt 0 ] ; then
  {
    failed "$0:$LINENO while running callsomething above _err:${_err}"
  }
  fi
} # end _fedora_36__64


_fedora_37__64() {
  trap "echo Error:$?" ERR INT
  local _parameters="${*-}"
  local -i _err=0
  dnf -y install https://dev.mysql.com/get/mysql80-community-release-fc37-1.noarch.rpm
  _redhat_flavor_install "${_parameters-}"
	_err=$?
	if [ ${_err} -gt 0 ] ; then
  {
    failed "$0:$LINENO while running callsomething above _err:${_err}"
  }
  fi
} # end _fedora_37__64


_fedora_38__64() {
  trap "echo Error:$?" ERR INT
  local _parameters="${*-}"
  local -i _err=0
  dnf -y install https://dev.mysql.com/get/mysql80-community-release-fc38-1.noarch.rpm
  _redhat_flavor_install "${_parameters-}"
	_err=$?
	if [ ${_err} -gt 0 ] ; then
  {
    failed "$0:$LINENO while running callsomething above _err:${_err}"
  }
  fi
} # end _fedora_38__64


_fedora_39__64() {
  trap "echo Error:$?" ERR INT
  local _parameters="${*-}"
  local -i _err=0
  dnf -y install https://dev.mysql.com/get/mysql80-community-release-fc39-1.noarch.rpm
  _redhat_flavor_install "${_parameters-}"
	_err=$?
	if [ ${_err} -gt 0 ] ; then
  {
    failed "$0:$LINENO while running callsomething above _err:${_err}"
  }
  fi
} # end _fedora_39__64


_fedora_40__64() {
  trap "echo Error:$?" ERR INT
  local _parameters="${*-}"
  local -i _err=0
  dnf -y install https://dev.mysql.com/get/mysql80-community-release-fc40-1.noarch.rpm
  _redhat_flavor_install "${_parameters-}"
	_err=$?
	if [ ${_err} -gt 0 ] ; then
  {
    failed "$0:$LINENO while running callsomething above _err:${_err}"
  }
  fi
} # end _fedora_40__64

_gentoo__32() {
  _redhat_flavor_install
} # end _gentoo__32

_gentoo__64() {
  _redhat_flavor_install
} # end _gentoo__64

_madriva__32() {
  _redhat_flavor_install
} # end _madriva__32

_madriva__64() {
  _redhat_flavor_install
} # end _madriva__64

_suse__32() {
  _redhat_flavor_install
} # end _suse__32

_suse__64() {
  _redhat_flavor_install
} # end _suse__64

_ubuntu__32() {
  _debian_flavor_install
} # end _ubuntu__32

_ubuntu__64() {
  _debian_flavor_install
} # end _ubuntu__64

_darwin__64() {
  Installing ## macOS MySQL From dmg

  _install_dmgs_list "${*-}"
} # end _darwin__64

_tar() {
  echo "Procedure not yet implemented. I don't know what to do."
} # end tar

_windows__64() {
  echo "Procedure not yet implemented. I don't know what to do."
} # end _windows__64

_windows__32() {
  echo "Procedure not yet implemented. I don't know what to do."
} # end _windows__32
