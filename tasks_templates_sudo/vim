#!/usr/bin/bash

_debian_flavor_install() {
  # trap  '_trap_on_exit $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  EXIT
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  enforce_variable_with_value USER_HOME "${USER_HOME}"
  if (
  install_requirements "linux" "
    base64
    unzip
    curl
    wget
    ufw
    nginx
  "
  ); then
    {
      apt install base64 -y
      apt install unzip -y
      apt install nginx -y
    }
  fi
  verify_is_installed "
    unzip
    curl
    wget
    tar
    ufw
    nginx
  "
  local PB_VERSION=0.16.7
  local CODENAME="pocketbase_${PB_VERSION}_linux_amd64.zip"
  local TARGET_URL="https://github.com/pocketbase/pocketbase/releases/download/v${PB_VERSION}/${CODENAME}"
  local DOWNLOADFOLDER="$(_find_downloads_folder)"
  enforce_variable_with_value DOWNLOADFOLDER "${DOWNLOADFOLDER}"
  directory_exists_with_spaces "${DOWNLOADFOLDER}"
  cd "${DOWNLOADFOLDER}"
  _do_not_downloadtwice "${TARGET_URL}" "${DOWNLOADFOLDER}"  "${CODENAME}"
  # unzip "${DOWNLOADFOLDER}/${CODENAME}" -d $HOME/pb/
  local UNZIPDIR="${USER_HOME}/_/software"
  mkdir -p "${UNZIPDIR}"
  _unzip "${DOWNLOADFOLDER:}" "${UNZIPDIR}" "${CODENAME}"
  local PATHTOPOCKETBASE="${UNZIPDIR}/pocketbase"
  local THISIP=$(myip)

} # end _debian_flavor_install

_redhat_flavor_install() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  echo "_redhat_flavor_install Procedure not yet implemented. I don't know what to do."
  enforce_variable_with_value USER_HOME "${USER_HOME}"
  enforce_variable_with_value USER_HOME "${USER_HOME}"
  dnf install vim -y
  curl -fLo "${USER_HOME}/.vim/autoload/plug.vim" --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  chown -R  "${SUDO_USER}" "${USER_HOME}/.vim/"
  curl -fLo "/root/.vim/autoload/plug.vim" --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  touch "${USER_HOME}/.vimrc"
  touch "/root/.vimrc"
  echo "
if v:lang =~ \"utf8$\" || v:lang =~ \"UTF-8$\"
set fileencodings=ucs-bom,utf-8,latin1
endif

set nocompatible        \" Use Vim defaults (much better!)
set bs=indent,eol,start         \" allow backspacing over everything in insert mode
\"set ai                 \" always set autoindenting on
\"set backup             \" keep a backup file
set viminfo='20,\\\"50    \" read/write a .viminfo file, don't store more
\" than 50 lines of registers
set history=50          \" keep 50 lines of command line history
set ruler               \" show the cursor position all the time
set ruler

\" Enable backspace buton
set backspace=indent,eol,start

\" Enable Control S
nnoremap <c-s> :w<CR> \" normal mode: save
inoremap <c-s> <Esc>:w<CR> \" insert mode: escape to normal and save
vnoremap <c-s> <Esc>:w<CR> \" visual mode: escape to normal and save

\" Enable Control X
nnoremap <c-x> :wq<CR> \" normal mode: save and exit
inoremap <c-x> <Esc>:wq<CR> \" insert mode: escape to normal and save and exit
vnoremap <c-x> <Esc>:wq<CR> \" visual mode: escape to normal and save and exit

\" Enable Control q
nnoremap <c-q> :q<CR> \" normal mode: quit
inoremap <c-q> <Esc>:q<CR> \" insert mode: escape to normal and quit
vnoremap <c-q> <Esc>:q<CR> \" visual mode: escape to normal and quit


\" Enable syntax highlighting
syntax on

\" tabs
set tabstop=2
set softtabstop=2 noexpandtab
set shiftwidth=2

\"
\"If you want tab characters in your file to appear 4 character cells wide:
\" set tabstop=4
\"
\" If your code requires use of actual tab characters these settings prevent unintentional insertion of spaces (these are the defaults, but you may want to set them defensively):
\"
\" set softtabstop=0 noexpandtab
\"
 \"If you also want to use tabs for indentation, you should also set shiftwidth to be the same as tabstop:
\"
\" set shiftwidth=4
\"
\" To make any of these settings permanent add them to your vimrc.
\" If you want pressing the tab key to indent with 4 space characters:
\"
\" First, tell vim to use 4-space indents, and to intelligently use the tab key for indentation instead of for inserting tab characters (when at the beginning of a line):
\"
\" set shiftwidth=4 smarttab
\"
\" If you would also like vim to only use space caharacters, never tab characters:
\"
\" set expandtab
\"
\" Finally, I also recommend setting tab stops to be different from the indentation width, in order to reduce the chance of tab characters masquerading as proper indents:
\"
\" set tabstop=8 softtabstop=0
\"
\" To make any of these settings permanent add them to your vimrc.
\" More Details
\"
\"In case you need to make adjustments, or would simply like to understand what these options all mean, here is a breakdown of what each option means:
\"
\"    tabstop
\"
\"    The width of a hard tabstop measured in \"spaces\" -- effectively the (maximum) width of an actual tab character.
\"    shiftwidth
\"
\"   The size of an \"indent\". It is also measured in spaces, so if your code base indents with tab characters then you want shiftwidth to equal the number of tab characters times tabstop. This is also used by things like the =, > and < commands.
\"    softtabstop
\"
\"    Setting this to a non-zero value other than tabstop will make the tab key (in insert mode) insert a combination of spaces (and possibly tabs) to simulate tab stops at this width.
\"    expandtab
\"
\"    Enabling this will make the tab key (in insert mode) insert spaces instead of tab characters. This also affects the behavior of the retab command.
\"    smarttab
\"
\"    Enabling this will make the tab key (in insert mode) insert spaces or tabs to go to the next indent of the next tabstop when the cursor is at the beginning of a line (i.e. the only preceding characters are whitespace).
\"
\" For further details on any of these see :help 'optionname' in vim (e.g. :help 'tabstop')


\" Only do this part when compiled with support for autocommands
if has(\"autocmd\")
augroup redhat
autocmd!
\" In text files, always limit the width of text to 78 characters
\" autocmd BufRead *.txt set tw=78
\" When editing a file, always jump to the last cursor position
autocmd BufReadPost *
\\ if line(\"'\\\"\") > 0 && line (\"'\\\"\") <= line(\"$\") |
\\   exe \"normal! g'\\\"\" |
\\ endif
\" do not write swapfile on most commonly used directories for NFS mounts or USB sticks
autocmd BufNewFile,BufReadPre /media/*,/run/media/*,/mnt/* set directory=~/tmp,/var/tmp,/tmp
\" start with spec file template
autocmd BufNewFile *.spec 0r /usr/share/vim/vimfiles/template.spec
augroup END
endif

if has(\"cscope\") && filereadable(\"/usr/bin/cscope\")
set csprg=/usr/bin/cscope
set csto=0
set cst
set nocsverb
\" add any database in current directory
if filereadable(\"cscope.out\")
cs add \$PWD/cscope.out
\" else add database pointed to by environment
elseif \$CSCOPE_DB != \"\"
cs add \$CSCOPE_DB
endif
set csverb
endif


if has(\"cscope\") && filereadable(\"/usr/bin/cscope\")
set csprg=/usr/bin/cscope
set csto=0
set cst
set nocsverb
\" add any database in current directory
if filereadable(\"cscope.out\")
cs add \$PWD/cscope.out
\" else add database pointed to by environment
elseif \$CSCOPE_DB != \"\"
cs add \$CSCOPE_DB
endif
set csverb
endif

\" Switch syntax highlighting on, when the terminal has colors
\" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has(\"gui_running\")
syntax on
set hlsearch
endif

\" Enables filetype detection, loads ftplugin, and loads indent
\" (Not necessary on nvim and may not be necessary on vim 8.2+)
filetype plugin indent on

call plug#begin()
Plug 'dense-analysis/ale'

Plug 'gleam-lang/gleam.vim'
\" The default plugin directory will be as follows:
\"   - Vim (Linux/macOS): '~/.vim/plugged'
\"   - Vim (Windows): '~/vimfiles/plugged'
\"   - Neovim (Linux/macOS/Windows): stdpath('data') . '/plugged'
\" You can specify a custom plugin directory by passing it as the argument
\"   - e.g. 'call plug#begin('~/.vim/plugged')'
\"   - Avoid using standard Vim directory names like 'plugin'

\" Make sure you use single quotes

Plug 'preservim/nerdtree' |
            \\ Plug 'Xuyuanp/nerdtree-git-plugin' |
            \\ Plug 'PhilRunninger/nerdtree-buffer-ops' |
            \\ Plug 'ryanoasis/vim-devicons' |
            \\ Plug 'tiagofumo/vim-nerdtree-syntax-highlight' |
            \\ Plug 'PhilRunninger/nerdtree-visual-selection'
\" tree files


Plug 'mattn/emmet-vim'
\"Plug 'wincent/terminus'

\"           \\ Plug 'scrooloose/nerdtree-project-plugin' |

let g:NERDTreeGitStatusIndicatorMapCustom = {
                \\ 'Modified'  :'✹',
                \\ 'Staged'    :'✚',
                \\ 'Untracked' :'✭',
                \\ 'Renamed'   :'➜',
                \\ 'Unmerged'  :'═',
                \\ 'Deleted'   :'✖',
                \\ 'Dirty'     :'✗',
                \\ 'Ignored'   :'☒',
                \\ 'Clean'     :'✔︎',
                \\ 'Unknown'   :'?',
                \\ }


\" Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
Plug 'junegunn/vim-easy-align'

\" Any valid git URL is allowed
\" Plug 'https://github.com/junegunn/vim-github-dashboard.git'

\" Multiple Plug commands can be written in a single line using | separators
\" Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

\" On-demand loading
\" Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
\" Plug 'tpope/vim-fireplace', { 'for': 'clojure' }

\" Using a non-default branch
\" Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }

\" Using a tagged release; wildcard allowed (requires git 1.9.2 or above)
\" Plug 'fatih/vim-go', { 'tag': '*' }

\" Plugin options
\" Plug 'nsf/gocode', { 'tag': 'v.20150303', 'rtp': 'vim' }

\" Plugin outside ~/.vim/plugged with post-update hook
\" Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }

\" Unmanaged plugin (manually installed and updated)
\" Plug '~/my-prototype-plugin'

\" Initialize plugin system
\" - Automatically executes 'filetype plugin indent on' and 'syntax enable'.

\" Svelte Section https://github.com/evanleck/vim-svelte?ref=madewithsvelte.com
Plug 'othree/html5.vim'
Plug 'pangloss/vim-javascript'
Plug 'evanleck/vim-svelte', {'branch': 'main'}

\" Using vim-plug
Plug 'elixir-editors/vim-elixir'

call plug#end()
\" You can revert the settings after the call like so:
\"   filetype indent off   \" Disable file-type-specific indentation
\"   syntax off            \" Disable syntax highlighting
\"

\" Ale Plug Plugin choices:
\"  https://github.com/dense-analysis/ale
\"
\" Enable completion where available.
\" This setting must be set before ALE is loaded.
\"
\" You should not turn this setting on if you wish to use ALE as a completion
\" source for other completion plugins, like Deoplete.
let g:ale_completion_enabled = 1


\" Set this variable to 1 to fix files when you save them.
let g:ale_fix_on_save = 1


\" In ~/.vim/vimrc, or somewhere similar.
let g:ale_fixers = {
\\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\\   'javascript': ['biome'],
\\}
\" end  
" >> "${USER_HOME}/.vimrc" >> "/root/.vimrc"
  chown -R "${SUDO_USER}" "${USER_HOME}/.vim/autoload/plug.vim"
  chown -R "${SUDO_USER}" "${USER_HOME}/.vimrc"
  # vim
  # vim -es -u vimrc -i NONE -c "PlugInstall" -c "qa"
  vim -c PlugInstall -c qa
  su - "${SUDO_USER}" -c 'vim -c PlugInstall -c qa'
  # su - "${SUDO_USER}" -c 'vim -es -u vimrc -i NONE -c "PlugInstall" -c "qa"'


  # neovim
  # nvim -es -u init.vim -i NONE -c "PlugInstall" -c "qa"
} # end _redhat_flavor_install

_arch_flavor_install() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  echo "_arch_flavor_install Procedure not yet implemented. I don't know what to do."
} # end _readhat_flavor_install

_arch__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _arch_flavor_install
} # end _arch__32

_arch__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _arch_flavor_install
} # end _arch__64

_centos__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _centos__32

_centos__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _centos__64

_debian__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _debian_flavor_install
} # end _debian__32

_debian__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _debian_flavor_install
} # end _debian__64

_fedora__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _fedora__32

_fedora__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _fedora__64

_deepin__64() {
  trap "echo Error:$?" ERR INT
  local _parameters="${*-}"
  local -i _err=0
  _redhat_flavor_install "${_parameters-}"
  _err=$?
  if [ ${_err} -gt 0 ] ; then
  {
    failed "struct_testing:$LINENO $0:$LINENO  while running callsomething above _err:${_err}"
  }
  fi
} # end _deepin__64

_deepin_39__64() {
  trap "echo Error:$?" ERR INT
  local _parameters="${*-}"
  local -i _err=0
  _redhat_flavor_install "${_parameters-}"

  _err=$?
  if [ ${_err} -gt 0 ] ; then
  {
    failed "struct_testing:$LINENO $0:$LINENO while running callsomething above _err:${_err}"
  }
  fi
} # end _deepin_39__64


_gentoo__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _gentoo__32

_gentoo__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _gentoo__64

_madriva__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _madriva__32

_madriva__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _madriva__64

_suse__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _suse__32

_suse__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _suse__64

_ubuntu__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _debian_flavor_install
} # end _ubuntu__32

_ubuntu__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _debian_flavor_install
} # end _ubuntu__64

_darwin__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  echo "_darwin__64 Procedure not yet implemented. I don't know what to do."
} # end _darwin__64

_darwin__arm64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  echo "_darwin__arm64 Procedure not yet implemented. I don't know what to do."
} # end _darwin__arm64

_tar() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  echo "_tar Procedure not yet implemented. I don't know what to do."
} # end tar

_windows__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  echo "_windows__64 Procedure not yet implemented. I don't know what to do."
} # end _windows__64

_windows__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  echo "_windows__32 Procedure not yet implemented. I don't know what to do."
} # end _windows__32
