#!/usr/bin/bash
alias egrep='grep -E --color=auto --exclude-dir={.bzr,CVS,.git,.hg,.svn,.idea,.tox}'
_add_variables_to_bashrc_zshrc(){
  # trap 'echo -e "${RED}" && echo "ERROR failed $0:$LINENO _add_variables_to_bashrc_zshrc cargo" && echo -e "${RESET}" && return 0' ERR
  local FINDCARGO="/opt/homecargo/bin/cargo"
  
  if [[ -e "${USER_HOME}/.cargo/bin/cargo" ]] ; then
  {
    FINDCARGO="${USER_HOME}/.cargo"
  }
  elif [[ -e "/root/.cargo/bin/cargo" ]] ; then
  {
    FINDCARGO="/root/.cargo"
  }
  elif [[ -e "/opt/cargo/bin/cargo" ]] ; then
  {
    FINDCARGO="/opt/cargo"
  }
  fi

  local CARGO_SH_CONTENT='

# CARGO - RUST
source "'${FINDCARGO}'/env"

'
  echo "${CARGO_SH_CONTENT}"
  local INITFILE INITFILES="
   .bashrc
   .zshrc
   .bash_profile
   .profile
   .zshenv
   .zprofile
  "
  local changed_files=""
  while read INITFILE; do
  {
    [ -z ${INITFILE} ] && continue
    [[ ! -e "${USER_HOME}/${INITFILE}" ]] && continue
    Checking "${USER_HOME}/${INITFILE}"
    chown "${SUDO_USER}" "${USER_HOME}/${INITFILE}"
    (_if_not_contains  "${USER_HOME}/${INITFILE}" "# CARGO - RUST" ) || Configuring "${USER_HOME}/${INITFILE}"
    (_if_not_contains  "${USER_HOME}/${INITFILE}" "# CARGO - RUST" ) && Skipping configuration for "${USER_HOME}/${INITFILE}"
    #                             filename            value          || do this .............
    (_if_not_contains  "${USER_HOME}/${INITFILE}" "# CARGO - RUST" ) || echo -e "${CARGO_SH_CONTENT}" >> "${USER_HOME}/${INITFILE}"
    (_if_not_contains  "${USER_HOME}/${INITFILE}" "# CARGO - RUST" ) && changed_files="${changed_files} \"${USER_HOME}/${INITFILE}\" "

    [[ ! -e "${HOME}/${INITFILE}" ]] && continue
    Checking "${HOME}/${INITFILE}"
    # chown "${SUDO_USER}" "${HOME}/${INITFILE}"
    (_if_not_contains  "${HOME}/${INITFILE}" "# CARGO - RUST" ) || Configuring "${HOME}/${INITFILE}"
    (_if_not_contains  "${HOME}/${INITFILE}" "# CARGO - RUST" ) && Skipping configuration for "${HOME}/${INITFILE}"
    #                             filename            value          || do this .............
    (_if_not_contains  "${HOME}/${INITFILE}" "# CARGO - RUST" ) || echo -e "${CARGO_SH_CONTENT}" >> "${HOME}/${INITFILE}"
    (_if_not_contains  "${HOME}/${INITFILE}" "# CARGO - RUST" ) && changed_files="${changed_files} \"${HOME}/${INITFILE}\" "

    
  }
  done <<< "${INITFILES}"
  # if it_exists /home/linuxcargo ; then
  # {
  #   rm -rf /home/linuxcargo
  # }
  # fi
  file_exists_with_spaces "${FINDCARGO}"
  source "${FINDCARGO}/env"
  Checking "all files changed files command for you" :
  echo "sudo vim ${changed_files}"
  echo "sudo nano ${changed_files}"
} # _add_variables_to_bashrc_zshrc


_debian_flavor_install() {
  # trap  '_trap_on_exit $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  EXIT
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  enforce_variable_with_value USER_HOME "${USER_HOME}"
  if 
    (
    install_requirements "linux" "
      base64
      unzip
      curl
      wget
      ufw
      nginx
    "
    ); then
    {
      apt install base64 -y
      apt install unzip -y
    }
  fi
  verify_is_installed "
    unzip
    curl
    wget
    tar
  "
  export ARCHFLAGS="-arch $(uname -m)"
  ARCHFLAGS="-arch $(uname -m)" curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
  [[ ! -e "${USER_HOME}/.cargo" ]] && cp -R /root/.cargo "${USER_HOME}/.cargo"
  chmod -R 755 "${USER_HOME}/.cargo"
  chown -R "${SUDO_USER}"   "${USER_HOME}/.cargo"
  chown -R "${SUDO_USER}"   "${USER_HOME}/.cargo/bin"
  chown -R "${SUDO_USER}"   "${USER_HOME}/.cargo/env"
 #  su - "${SUDO_USER}" -c "ARCHFLAGS='-arch $(uname -m)' curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh"
 if su - "${SUDO_USER}" -c "ARCHFLAGS='-arch $(uname -m)' curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh" ; then
          {
                  echo "oops"
          }
  fi

  _add_variables_to_bashrc_zshrc
  rustup default stable
  su - "${SUDO_USER}" -c "rustup default stable" 
} # end _debian_flavor_install

_redhat_flavor_install() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  enforce_variable_with_value USER_HOME "${USER_HOME}"
  dnf build-dep rust  -y --allowerasing --skip-broken
  if (install_requirements "linux" "
      unzip
      curl
      wget
    "
    ); then
  {
      echo "warning: failed to install some deps"
  }
  fi
  verify_is_installed "
    unzip
    curl
    wget
    tar
  "
  Installing "_add_variables_to_bashrc_zshrc for ROOT and USER"
  _add_variables_to_bashrc_zshrc
 
  export ARCHFLAGS="-arch $(uname -m)" 
  
  ARCHFLAGS="-arch $(uname -m)" 
  Installing "ROOT install:ARCHFLAGS='-arch ${ARCHFLAGS-}' curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh"
  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
  [[ ! -e "${USER_HOME}/.cargo" ]] && cp -R /root/.cargo "${USER_HOME}/.cargo" 
  chmod -R 755 "${USER_HOME}/.cargo"
  chown -R "${SUDO_USER}"   "${USER_HOME}/.cargo"
  chown -R "${SUDO_USER}"   "${USER_HOME}/.cargo/bin"
  chown -R "${SUDO_USER}"   "${USER_HOME}/.cargo/env"
  Installing "USER install(${USER_HOME}):su - \"${SUDO_USER}\" -c \"ARCHFLAGS='-arch $(uname -m)' curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\""
  if su - "${SUDO_USER}" -c "ARCHFLAGS='-arch $(uname -m)' curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh" ; then
  {
    failed "Failed to install for user"
  } 
  else 
  {
    passed "install for user"
  }
  fi
  echo "ROOT: rustup default stable"
  rustup default stable
  echo "USER: su - \"${SUDO_USER}\" -c \"rustup default stable\"" 
  su - "${SUDO_USER}" -c "rustup default stable" 
} # end _redhat_flavor_install

_arch_flavor_install() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  echo "_arch_flavor_install Procedure not yet implemented. I don't know what to do."
} # end _readhat_flavor_install

_arch__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _arch_flavor_install
} # end _arch__32

_arch__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _arch_flavor_install
} # end _arch__64

_centos__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _centos__32

_centos__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _centos__64

_debian__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _debian_flavor_install
} # end _debian__32

_debian__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _debian_flavor_install
} # end _debian__64

_fedora__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _fedora__32

_fedora_37__64(){
  _redhat_flavor_install
} # end _fedora_37__64

_fedora_38__64(){
  _redhat_flavor_install
} # end _fedora_38__64

_fedora_39__64(){
  _redhat_flavor_install
} # end _fedora_39__64

_fedora_40__64(){
  _redhat_flavor_install
} # end _fedora_40__64

_fedora__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _fedora__64

_gentoo__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _gentoo__32

_gentoo__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _gentoo__64

_madriva__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _madriva__32

_madriva__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _madriva__64

_suse__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _suse__32

_suse__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _suse__64

_ubuntu__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _debian_flavor_install
} # end _ubuntu__32

_ubuntu__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _debian_flavor_install
} # end _ubuntu__64

_ubuntu__aarch64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _debian_flavor_install
} # end _ubuntu__aarch64

_ubuntu_22__aarch64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _debian_flavor_install
} # end _ubuntu_22__aarch64

_darwin__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
   export ARCHFLAGS="-arch $(uname -m)"
  ARCHFLAGS="-arch $(uname -m)" curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
  su - "${SUDO_USER}" -c "ARCHFLAGS='-arch $(uname -m)' curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh"
} # end _darwin__64

_darwin__arm64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
   export ARCHFLAGS="-arch $(uname -m)"
  ARCHFLAGS="-arch $(uname -m)" curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
  su - "${SUDO_USER}" -c "ARCHFLAGS='-arch $(uname -m)' curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh"
} # end _darwin__arm64

_tar() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
} # end tar

_windows__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  export ARCHFLAGS="-arch $(uname -m)"
  ARCHFLAGS="-arch $(uname -m)" curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
  su - "${SUDO_USER}" -c "ARCHFLAGS='-arch $(uname -m)' curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh"
} # end _windows__64

_windows__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  echo "_windows__32 Procedure not yet implemented. I don't know what to do."
} # end _windows__32
