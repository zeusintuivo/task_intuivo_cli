#!/usr/bin/env bash
#
# @author Zeus Intuivo <zeus@intuivo.com>
#
#

_debian_flavor_install() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  enforce_variable_with_value USER_HOME "${USER_HOME}"
  if (
  install_requirements "linux" "
    base64
    unzip
    curl
    wget
    ufw
    nginx
  "
  ); then
    {
      apt install base64 -y
      apt install unzip -y
      apt install nginx -y
    }
  fi
  verify_is_installed "
    unzip
    curl
    wget
    tar
    ufw
    nginx
  "
  local PB_VERSION=0.16.7
  local CODENAME="pocketbase_${PB_VERSION}_linux_amd64.zip"
  local TARGET_URL="https://github.com/pocketbase/pocketbase/releases/download/v${PB_VERSION}/${CODENAME}"
  local DOWNLOADFOLDER="$(_find_downloads_folder)"
  enforce_variable_with_value DOWNLOADFOLDER "${DOWNLOADFOLDER}"
  directory_exists_with_spaces "${DOWNLOADFOLDER}"
  cd "${DOWNLOADFOLDER}"
  _do_not_downloadtwice "${TARGET_URL}" "${DOWNLOADFOLDER}"  "${CODENAME}"
  # unzip "${DOWNLOADFOLDER}/${CODENAME}" -d $HOME/pb/
  local UNZIPDIR="${USER_HOME}/_/software"
  mkdir -p "${UNZIPDIR}"
  _unzip "${DOWNLOADFOLDER}" "${UNZIPDIR}" "${CODENAME}"
  local PATHTOPOCKETBASE="${UNZIPDIR}/pocketbase"
  local THISIP=$(myip)

} # end _debian_flavor_install

_get_dowload_target() {
  # Sample call:
  #
  #  _get_dowload_target https://linux.dropbox.com/packages/fedora/
  #
  # VERBOSE=1
  local -i _err=0
  local URL="${1}"   #           param order    varname    varvalue     sample_value
  enforce_parameter_with_value           1        URL      "${URL}"     "https://linux.dropbox.com/packages/fedora/"
  #
  #
  # (( VERBOSE )) && echo "CODEFILE=\"\"\"\$(wget --quiet --no-check-certificate  \"${URL}\" -O -  2>/dev/null)\"\"\""
  local CODEFILE="""$(wget --quiet --no-check-certificate  "${URL}" -O -  2>/dev/null )""" # suppress only wget download messages, but keep wget output for variable
  _err=$?
  if [ ${_err} -gt 0 ] ; then
  {
    echo "$0:$LINENO _err:${_err}: CODEFILE:${CODEFILE}"
    return ${_err}
  }
  fi


  enforce_variable_with_value CODEFILE "${CODEFILE}"
  _err=$?
  if [ ${_err} -gt 0 ] ; then
  {
    echo "$0:$LINENO _err:${_err}: CODEFILE:${CODEFILE}"
    return ${_err}
  }
  fi

  #
  #
  local CODELASTESTBUILD=$(_extract_version "${CODEFILE}")
  _err=$?
  if [ ${_err} -gt 0 ] ; then
  {
    echo "$0:$LINENO _err:${_err}: CODELASTESTBUILD:${CODELASTESTBUILD}"
    return ${_err}
  }
  fi

  enforce_variable_with_value CODELASTESTBUILD "${CODELASTESTBUILD}"
  _err=$?
  if [ ${_err} -gt 0 ] ; then
  {
    echo "$0:$LINENO _err:${_err}: CODELASTESTBUILD:${CODELASTESTBUILD}"
    return ${_err}
  }
  fi


  local TARGETNAME=$(echo -n "${CODELASTESTBUILD}" | grep "${PLATFORM}" | grep "${PLATFORM}" |  tail -1)
  _err=$?
  if [ ${_err} -gt 0 ] ; then
  {
    echo "$0:$LINENO _err:${_err}: TARGETNAME:${TARGETNAME}"
    return ${_err}
  }
  fi

  enforce_variable_with_value TARGETNAME "${TARGETNAME}"
  _err=$?
  if [ ${_err} -gt 0 ] ; then
  {
    echo "$0:$LINENO _err:${_err}: TARGETNAME:${TARGETNAME}"
    return ${_err}
  }
  fi

  local _newURL=$(echo -n "${URL}" | sed 's/\/download.php//g')
  _err=$?
  if [ ${_err} -gt 0 ] ; then
  {
    echo "$0:$LINENO _err:${_err}: _newURL:${_newURL}"
    return ${_err}
  }
  fi
  if [[ -z ${_newURL} ]] ; then
  {
    echo "$0:$LINENO _err:${_err}: is empty _newURL:${_newURL}"
    return 1
  }
  fi

  echo -n "${_newURL}${TARGETNAME}"
  return 0
} # end _get_dowload_target

_extract_version() {
  echo "${*}" |  sed s/\>/\>\\n/g | sed "s/&apos;/\'/g" | sed 's/&nbsp;/ /g'  | grep "<a" | grep ".xz" | grep -v "xz.asc" | cut -d'"' -f2| sort | uniq | tail -1
} # end _extract_version

_find_latest_target_url() {
  # _download_compile_install() {
  # Sample use
  #   _download_compile_install
  local -i _err=0
  enforce_variable_with_value USER_HOME "${USER_HOME}"
  # local TARGET_URL=$(_get_dowload_target "https://www.nano-editor.org/dist/v6/")
  local TARGET_URL=$(_get_dowload_target "http://mirrors.kernel.org/gnu/emacs/")
  _err=$?
  # enforce_variable_with_value TARGET_URL "${TARGET_URL}"
  # Checking "TARGET_URL:${TARGET_URL}"
  echo -n "${TARGET_URL}"  | sed 's/.tar.xz.sig/.tar.xz/g'
  return ${_err}
} # end _find_latest_target_url

_redhat_flavor_install() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
 
  Message REF:https://gist.github.com/Dreameh/86562b83410db6151e871d811a70c470
  Comment Dependencies for development
  dnf group install "Development Tools" -y --allowerasing
  Comment Dependencies specific to emacs
  dnf builddep emacs -y --allowerasing

  Installing emacs from dnf
  dnf install emacs -y --allowerasing
  dnf reinstall emacs -y --allowerasing

  Installing emacs as compile to get latest
  Comment Download the latest stable release from emacs website
  # wget http://mirrors.kernel.org/gnu/emacs/emacs-26.3.tar.xz
  # wget http://mirrors.kernel.org/gnu/emacs/emacs-26.3.tar.xz.sig

  local -i _err=0
  local TARGET_URL=$(_find_latest_target_url)
  _err=$?
  if [ ${_err} -gt 0 ] ; then
  {
    failed "$0:$LINENO _err:${_err} TARGET_URL:${TARGET_URL}"
  }
  else
  {
    passed TARGET_URL:${TARGET_URL} 
  }
  fi

  Checking "TARGET_URL:${TARGET_URL}"
  enforce_variable_with_value TARGET_URL "${TARGET_URL}"
  _err=$?
  if [ ${_err} -gt 0 ] ; then
  {
    failed "$0:$LINENO _err:${_err} TARGET_URL:${TARGET_URL}"
  }
  fi

  
  local CODENAME=$(basename "${TARGET_URL}")
  enforce_variable_with_value CODENAME "${CODENAME}"
  local DOWNLOADFOLDER="$(_find_downloads_folder)"
  enforce_variable_with_value DOWNLOADFOLDER "${DOWNLOADFOLDER}"
  directory_exists_with_spaces "${DOWNLOADFOLDER}"
  Checking "      CODENAME:$CODENAME"
  Checking "DOWNLOADFOLDER:$DOWNLOADFOLDER"
  Checking "    TARGET_URL:$TARGET_URL"
  enforce_contains "emacs-" "${CODENAME}"
  enforce_contains ".tar.xz" "${CODENAME}"
  enforce_contains "http://mirrors.kernel.org/gnu/emacs/" "${TARGET_URL}"
  enforce_contains "emacs-" "${TARGET_URL}"
  enforce_contains ".tar.xz" "${TARGET_URL}"
  enforce_variable_with_value DOWNLOADFOLDER "${DOWNLOADFOLDER}"
  
  Checking cd "${DOWNLOADFOLDER}"
  cd "${DOWNLOADFOLDER}"
  
  Checking  _do_not_downloadtwice "${TARGET_URL}" "${DOWNLOADFOLDER}"  "${CODENAME}"
  local -i _err=0
  if it_exists_with_spaces "${DOWNLOADFOLDER}/${CODENAME}.sig" ; then
  {
    if it_exists_with_spaces "${DOWNLOADFOLDER}/${CODENAME}" ; then
    {
      Comment \?\?\ gpg --verify "${DOWNLOADFOLDER}/${CODENAME}.sig" "${DOWNLOADFOLDER}/${CODENAME}"
      if ! ( command -v gpg >/dev/null 2>&1; )  ; then
      {
        Comment Verify the tar.xz file
        # gpg --verify emacs-26.3.tar.xz.sig emacs-26.3.tar.xz
        gpg --verify "${DOWNLOADFOLDER}/${CODENAME}.sig" "${DOWNLOADFOLDER}/${CODENAME}"
        _err=$?
      }
      else
      {
        _err=1
      }
      fi
      if [ ${_err} -gt 0 ] ; then
      {
        rm -rf "${DOWNLOADFOLDER}/${CODENAME}"
        wget "${TARGET_URL}"
        rm -rf "${DOWNLOADFOLDER}/${CODENAME}.sig"
        wget "${TARGET_URL}.sig" 
      }
      fi
    }
    fi

  }
  fi 
  if it_exists_with_spaces "${DOWNLOADFOLDER}/${CODENAME}.sig" ; then
  {
    rm -rf "${DOWNLOADFOLDER}/${CODENAME}.sig"
    wget "${TARGET_URL}.sig"
  }
  fi 
  if it_exists_with_spaces "${DOWNLOADFOLDER}/${CODENAME}" ; then
  {
    rm -rf "${DOWNLOADFOLDER}/${CODENAME}"
    wget "${TARGET_URL}"
  }
  fi 
  # _do_not_downloadtwice "${TARGET_URL}"     "${DOWNLOADFOLDER}"  "${CODENAME}"
  # Checking  _do_not_downloadtwice "${TARGET_URL}.sig" "${DOWNLOADFOLDER}"  "${CODENAME}.sig"
  # _do_not_downloadtwice "${TARGET_URL}.sig" "${DOWNLOADFOLDER}"  "${CODENAME}.sig"
       Comment \?\?\ gpg --verify "${DOWNLOADFOLDER}/${CODENAME}.sig" "${DOWNLOADFOLDER}/${CODENAME}"
      if ! ( command -v gpg >/dev/null 2>&1; )  ; then
      {
        Comment Verify the tar.xz file
        # gpg --verify emacs-26.3.tar.xz.sig emacs-26.3.tar.xz
        gpg --verify "${DOWNLOADFOLDER}/${CODENAME}.sig" "${DOWNLOADFOLDER}/${CODENAME}"
        _err=$?
        if [ ${_err} -gt 0 ] ; then
        {
          failed to verify "${DOWNLOADFOLDER}/${CODENAME}" with "${DOWNLOADFOLDER}/${CODENAME}.sig"
          ls -lctrlh "${DOWNLOADFOLDER}/${CODENAME}"
          ls -lctrlh "${DOWNLOADFOLDER}/${CODENAME}.sig"
          exit 1
        }
        fi
      }
      else
      {
        failed to find gpg program to check signature of download
      }
      fi

  Comment Once that has been taken care of, extract the tar.xz archive.
  # itar -xvf emacs-26.3.tar.xz
  Checking "tar -xvf \"${CODENAME}\""
  tar -xvf "${CODENAME}"
  [ $? -gt 0 ] && failed "to untar: tar -xvf ${CODENAME}"
 
  local FOLDER="$(echo "${CODENAME}" | sed 's/.tar.xz//g')"
  local VERSION="$(echo "${FOLDER}" | sed 's/nano-//g')"
  directory_exists_with_spaces "${FOLDER}"
  Comment Go into the newly made folder:"${FOLDER}"
  cd "${FOLDER}"
  # cd emacs-26.3

  Comment configure the source  
  ./configure

  Comment Compile the source
  make
  
  Checking the binary to see that it runs smoothly
  src/emacs -Q
  yes | cp src/emacs /usr/local/bin/emacs
 
  # Comment make install
  # Installing the binary emacs
  # make install
  cd ..
  # rm -rf emacs-26.3
  rm -rf "${FOLDER}"
 
  ensure emacs or "Failed to install emacs"
  rm -f "${DOWNLOADFOLDER}/${CODENAME}"
  file_does_not_exist_with_spaces "${DOWNLOADFOLDER}/${CODENAME}"
  return 0
 
  # echo "_redhat_flavor_install Procedure not yet implemented. I don't know what to do."
} # end _redhat_flavor_install

_arch_flavor_install() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  echo "_arch_flavor_install Procedure not yet implemented. I don't know what to do."
} # end _readhat_flavor_install

_arch__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _arch_flavor_install
} # end _arch__32

_arch__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _arch_flavor_install
} # end _arch__64

_centos__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _centos__32

_centos__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _centos__64

_debian__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _debian_flavor_install
} # end _debian__32

_debian__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _debian_flavor_install
} # end _debian__64

_fedora__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _fedora__32

_fedora__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _fedora__64

_gentoo__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _gentoo__32

_gentoo__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _gentoo__64

_madriva__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _madriva__32

_madriva__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _madriva__64

_suse__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _suse__32

_suse__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _suse__64

_ubuntu__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _debian_flavor_install
} # end _ubuntu__32

_ubuntu__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _debian_flavor_install
} # end _ubuntu__64

_darwin__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  Installing "
    # em script Emacs on mac experience  REF: https://medium.com/@holzman.simon/emacs-on-macos-catalina-10-15-in-2019-79ff713c1ccc
    # Compile emacs mac REF: https://emacs.stackexchange.com/questions/58526/how-do-i-build-emacs-from-sources-on-macos-catalina-version-10-15-4
  "
  enforce_variable_with_value USER_HOME "${USER_HOME}"
  local _requirements="
    texinfo
    autogen
    cmake
    cmake-docs
    make
    z3
    llvm
    emacs-clang-complete-async
    emacs
  "
  if ( ! install_requirements "darwin" " ${_requirements}"  ); then
  {
    Installing trying again brew installs
    su - "${SUDO_USER}" -c 'HOME='${USER_HOME}'  brew install '$(xargs <<< "${_requirements}")
  }
  fi
  # verify_is_installed " ${_requirements} "
  Checking makeinfo version: "# checkversion \$(makeinfo --version)>=4.13"
  Installing "
  # REF: https://stackoverflow.com/questions/44379909/how-to-upgrade-update-makeinfo-texinfo-from-version-4-8-to-4-13-on-macosx-termin
  brew info textinfo
  echo 'export PATH="/usr/local/opt/texinfo/bin:$PATH"' >> ~/.zshrc
  "
  Checking makeinfo version: "# checkversion \$(makeinfo --version)>=4.13"
  # checkversion $(makeinfo --version)>=4.13
  makeinfo --version

  echo mac:
  cd  "${USER_HOME}"
  su - "${SUDO_USER}" -c 'mkdir -p _/software'
  cd "${USER_HOME}/_/software"
  su - "${SUDO_USER}" -c 'HOME='${USER_HOME}' cd '${USER_HOME}'/_/software && git clone -b master git://git.sv.gnu.org/emacs.git'
  cd "${USER_HOME}/_/software/emacs"
  ./autogen.sh
  ./configure
  make -j3 -B --debug
  make check -j3 -B --debug
  make install -j3 -B --debug


  # echo "_darwin__64 Procedure not yet implemented. I don't know what to do."
} # end _darwin__64

_darwin__arm64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _darwin__64
  # echo "_darwin__arm64 Procedure not yet implemented. I don't know what to do."
} # end _darwin__arm64

_tar() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  echo "_tar Procedure not yet implemented. I don't know what to do."
} # end tar

_windows__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  echo "_windows__64 Procedure not yet implemented. I don't know what to do."
} # end _windows__64

_windows__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  echo "_windows__32 Procedure not yet implemented. I don't know what to do."
} # end _windows__32

