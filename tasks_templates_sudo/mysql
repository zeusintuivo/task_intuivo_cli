#!/usr/bin/bash


_get_mac_version(){
  # REF: https://superuser.com/questions/75166/how-to-find-out-mac-os-x-version-from-terminal
  # local MAJOR_MAC_VERSION=$(sw_vers -productVersion | awk -F '.' '{print $1 "." $2}')
  ensure sw_vers or "Failed to get info program sw_vers" 
  local _version_info="$(sw_vers -productVersion)"
  enforce_parameter_with_value 1 _version_info   "${_version_info}"  "10.14.6"
  local _major=$(cut -d '.' -f 1,2 <<< "${_version_info}")
  enforce_parameter_with_value 2 _major          "${_major}"         "10.14"
  local os_vers=( ${_version_info//./ } )

  local os_vers_major="${os_vers[0]}"
  local os_vers_minor="${os_vers[1]}"
  local os_vers_patch="${os_vers[2]}"
  local os_vers_build=$(sw_vers -buildVersion)

  # Sample semver output
  # echo "${os_vers_major}.${os_vers_minor}.${os_vers_patch}+${os_vers_build}"
  # expected 10.12.6+16G29
  echo "${_major}"
  return 0
} # end _get_mac_version

_install_dmgs_list() {
  Comment start $0$1 _install_dmgs_list
  local installlist one  target_name target_url target_app app_name extension
  local _major_version1=$(_get_mac_version )
  local _major_version=$(_get_mac_version | tail -1 )
  enforce_parameter_with_value 1 _major_version   "${_major_version}"  "10.14"
  echo "${_major_version1}"
  echo "_major_version:${_major_version}"
    case "${_major_version}" in
       "13"*) # Ventura 8.0.23 or newer
          installlist="  
          mysql-workbench-community-8.0.31-macos-x86_64.dmg|MySQL Workbench community-8.0.31/MySQLWorkbench.app|https://cdn.mysql.com/archives/mysql-workbench/mysql-workbench-community-8.0.31-macos-x86_64.dmg
          "
          ;;
       "12"*) # Monterrey 8.0.23 or newer
          installlist="  
          mysql-workbench-community-8.0.31-macos-x86_64.dmg|MySQL Workbench community-8.0.31/MySQLWorkbench.app|https://cdn.mysql.com/archives/mysql-workbench/mysql-workbench-community-8.0.31-macos-x86_64.dmg
          "
          ;;
       "11.1"*) # Big Sur mysql 8.0.23 or newer
          installlist="  
          mysql-workbench-community-8.0.31-macos-x86_64.dmg|MySQL Workbench community-8.0.31/MySQLWorkbench.app|https://cdn.mysql.com/archives/mysql-workbench/mysql-workbench-community-8.0.31-macos-x86_64.dmg
          "
          ;;
        "10.15"*) # Catalina mysql 8.0.19 to 8.0.23
          installlist="  
          mysql-workbench-community-8.0.22-macos-x86_64.dmg|MySQL Workbench community-8.0.22/MySQLWorkbench.app|https://cdn.mysql.com/archives/mysql-workbench/mysql-workbench-community-8.0.22-macos-x86_64.dmg
          "
          ;;
        "10.14"*) # Mojave mysql 8.0.1, mysql-workbench 8.0.13 to 8.0.21 #  8.0.22 says is 'compatible with Mojave' but Phisical tried on Mojave Mac flags as not
          installlist="  
          mysql-workbench-community-8.0.21-macos-x86_64.dmg|MySQL Workbench community-8.0.21/MySQLWorkbench.app|https://cdn.mysql.com/archives/mysql-workbench/mysql-workbench-community-8.0.21-macos-x86_64.dmg
          mysql-8.0.18-macos10.14-x86_64.dmg|mysql-8.0.18-macos10.14-x86_64/mysql-8.0.18-macos10.14-x86_64.pkg|https://cdn.mysql.com/archives/mysql-8.0/mysql-8.0.18-macos10.14-x86_64.dmg
          "
          ;;
        "10.13"*) # High Sierra mysql 8.0.11 rc to 8.0.18
          installlist="  
          mysql-workbench-community-8.0.11-macos-x86_64.dmg|MySQL Workbench community-8.0.11/MySQLWorkbench.app|https://cdn.mysql.com/archives/mysql-workbench/mysql-workbench-community-8.0.11-macos-x86_64.dmg
          "
          ;;
        "10.12"*)  # Sierra mysql 6.3.9 to 6.3.10
          installlist="  
          mysql-workbench-community-6.3.10-macos-x86_64.dmg|MySQL Workbench community-6.3.10/MySQLWorkbench.app|https://cdn.mysql.com/archives/mysql-workbench/mysql-workbench-community-6.3.10-macos-x86_64.dmg
          "
          ;;
        "10.11"*) # El Capitan mysql 6.3.9 to 6.3.10
          installlist="  
          mysql-workbench-community-6.3.9-macos-x86_64.dmg|MySQL Workbench community-6.3.9/MySQLWorkbench.app|https://cdn.mysql.com/archives/mysql-workbench/mysql-workbench-community-6.3.9-macos-x86_64.dmg
          "
          ;;
        "10.10"*) # Yosemite mysql. to 6.3.6
          installlist="  
          mysql-workbench-community-6.3.6-macos-x86_64.dmg|MySQL Workbench community-6.3.6/MySQLWorkbench.app|https://cdn.mysql.com/archives/mysql-workbench/mysql-workbench-community-6.3.6-macos-x86_64.dmg
          "
          ;;
        *) 
          warning "Platform $OSTYPE not supported"
          installlist="  
          mysql-workbench-community-8.0.31-macos-x86_64.dmg|MySQL Workbench community-8.0.31/MySQLWorkbench.app|https://cdn.mysql.com/archives/mysql-workbench/mysql-workbench-community-8.0.31-macos-x86_64.dmg
          "
          ;;
    esac
    Installing "# $installlist" 
  # Installer dmg file. |       installer file once mounted. |.  location from url to download  |        
  Checking dmgs apps
  while read -r one ; do
  {
    if [[ -n "${one}" ]] ; then
    {

      target_name="$(echo "${one}" | cut -d'|' -f1)"
      extension="$(echo "${target_name}" | rev | cut -d'.' -f 1 | rev)"
      target_app="$(echo "${one}" | cut -d'|' -f2)"
      app_name="$(echo "$(basename "${target_app}")")"
      target_url="$(echo "${one}" | cut -d'|' -f3-)"
      if [[ -n "${target_name}" ]] ; then
      {
        if [[ -n "${target_url}" ]] ; then
        {
          if [[ ! -d "/Applications/${app_name}" ]] ; then
          {
            Installing "${app_name}"
            _install_dmgs_dmg__64 "${target_name}" "${target_app}" "${target_url}"
          }
          else
          {
            passed  "/Applications/${app_name}"  --skipping already installed
          }
          fi
        }
        fi
      }
      fi
    }
    fi
  }
  done <<< "$(echo "${installlist}" | grep -vE '^#' | grep -vE '^\s+#')"

  Comment end $0$1 _install_dmgs_list
  return 0
} # end _install_dmgs_list

_debian_flavor_install() {
  echo "Procedure not yet implemented. I don't know what to do."
} # end _debian_flavor_install

_redhat_flavor_install() {
  echo "Procedure not yet implemented. I don't know what to do."
} # end _redhat_flavor_install

_arch_flavor_install() {
  echo "Procedure not yet implemented. I don't know what to do."
} # end _readhat_flavor_install

_arch__32() {
  _arch_flavor_install
} # end _arch__32

_arch__64() {
  _arch_flavor_install
} # end _arch__64

_centos__32() {
  _redhat_flavor_install
} # end _centos__32

_centos__64() {
  _redhat_flavor_install
} # end _centos__64

_debian__32() {
  _debian_flavor_install
} # end _debian__32

_debian__64() {
  _debian_flavor_install
} # end _debian__64

_fedora__32() {
  _redhat_flavor_install
} # end _fedora__32

_fedora__64() {
  _redhat_flavor_install
} # end _fedora__64

_gentoo__32() {
  _redhat_flavor_install
} # end _gentoo__32

_gentoo__64() {
  _redhat_flavor_install
} # end _gentoo__64

_madriva__32() {
  _redhat_flavor_install
} # end _madriva__32

_madriva__64() {
  _redhat_flavor_install
} # end _madriva__64

_suse__32() {
  _redhat_flavor_install
} # end _suse__32

_suse__64() {
  _redhat_flavor_install
} # end _suse__64

_ubuntu__32() {
  _debian_flavor_install
} # end _ubuntu__32

_ubuntu__64() {
  _debian_flavor_install
} # end _ubuntu__64

_darwin__64() {
  Installing ## macOS MySQL From dmg

  _install_dmgs_list
} # end _darwin__64

_tar() {
  echo "Procedure not yet implemented. I don't know what to do."
} # end tar

_windows__64() {
  echo "Procedure not yet implemented. I don't know what to do."
} # end _windows__64

_windows__32() {
  echo "Procedure not yet implemented. I don't know what to do."
} # end _windows__32
