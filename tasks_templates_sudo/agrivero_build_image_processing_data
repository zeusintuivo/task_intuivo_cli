#!/usr/bin/env bash
#
# @author Zeus Intuivo <zeus@intuivo.com>
#
_package_list_installer() {
  # trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  local package packages="${@}"
  trap 'echo -e "${RED}" && echo "ERROR failed $0:$LINENO _package_list_installer agri_pd" && echo -e "${RESET}" && return 0' ERR

  if ! install_requirements "linux" "${packages}" ; then
  {
    warning "installing requirements. ${CYAN} attempting to install one by one"
    while read package; do
    {
      [ -z ${package} ] && continue
      if ! install_requirements "linux" "${package}" ; then
      {
        _err=$?
        if [ ${_err} -gt 0 ] ; then
        {
          echo -e "${RED}"
          echo failed to install requirements "${package}"
          echo -e "${RESET}"
        }
        fi
      }
      fi
    }
    done <<< "${packages}"
  }
  fi
} # end _package_list_installer

_git_clone() {
	# Sample usage
	# _git_clone git@github.com:some-ai/processing_data.git  "$HOME"  
	# _git_clone git@github.com:another-ai/processing_data.git  "$HOME" "i_experiment_branch" 
	#
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  trap 'echo -e "${RED}" && echo "ERROR failed $0:$LINENO  _git_clone I3STATUS" && echo -e "${RESET}" && return 0' ERR
  local _source="${1-}"
  local _target="${2-}"
	local _branch="${3-}"
  Checking "${SUDO_USER} git clone ${_source}  ${_target}  --branch ${_branch} "
  pwd
  if  it_exists_with_spaces "${_target}" ; then # && it_exists_with_spaces "${_target}/.git" ; then
  {
    if it_exists_with_spaces "${_target}/.git" ; then
    {
      if ! cd "${_target}" ; then
			{
				warning Could not CD into "${_target}. There seems to be a problem" 
				return 1
			}
			fi
      if [[ -n "${_branch}" ]] 
				&& ! git checkout "${_branch}" ; then
			{
					warning Could could not checkout such branch: "${_branch}"
				 return 1	
			}
			fi	
      if git config pull.rebase false ; then
      {
        warning Could not git config pull.rebase false
      }
      fi
      if git fetch  ; then
      {
        warning Could not git fetch
      }
      fi
      if git pull  ; then
      {
        warning Could not git pull
      }
      fi
    }
    fi
  }
  else
  {
    if git clone "${_source}" "${_target}"  ; then
    {
      warning Could not git clone "${_source}" "${_target}"
    }
    fi
      if ! cd "${_target}" ; then
			{
				warning Could not CD into "${_target}. There seems to be a problem. Clone failed!!!" 
				return 1
			}
			fi
      if [[ -n "${_branch}" ]] 
				&& ! git checkout "${_branch}" ; then
			{
					warning Could could not checkout such branch: "${_branch}"
				 return 1	
			}
			fi	
      if git config pull.rebase false ; then
      {
        warning Could not git config pull.rebase false
      }
      fi
  }
  fi
  chown -R "${SUDO_USER}" "${_target}"

} # end _git_clone



_add_variables_to_bashrc_zshrc(){
	local XDG_DATA_HOME="${XDG_DATA_HOME:-${USER_HOME}/.local/share}"
	Checking "mkdir -p \"${XDG_DATA_HOME}/agri_pd-rust\""
	mkdir -p "${XDG_DATA_HOME}/agri_pd-rust"

  directory_exists_with_spaces "${XDG_DATA_HOME}/agri_pd-rust"
  directory_exists_with_spaces "${USER_HOME}/.agri_pd-rs"

  if [[ ! -e "${XDG_DATA_HOME}/agri_pd-rust/config.toml" ]] ; then 
  {
		cp "${USER_HOME}/.agri_pd-rs/examples/config.toml" "${XDG_DATA_HOME}/agri_pd-rust/config.toml"
	}
	fi


	export XDG_DATA_HOME="${XDG_DATA_HOME}"
  cd "${USER_HOME}/.agri_pd-rs/"
	su - "${SUDO_USER}" -c 'cd '${USER_HOME}'/.agri_pd-rs/ && cargo build'
	su - "${SUDO_USER}" -c 'cd '${USER_HOME}'/.agri_pd-rs/ && cargo xtask generate-manpage'
	su - "${SUDO_USER}" -c 'cd '${USER_HOME}'/.agri_pd-rs/ && cargo install --path . --locked'
	cp -R "${USER_HOME}/.agri_pd-rs/files/"* "${XDG_DATA_HOME}/agri_pd-rust/"
  mkdir -p "${XDG_DATA_HOME}/man/man1/"
	directory_exists_with_spaces "${XDG_DATA_HOME}/man/man1/"

	cp "${USER_HOME}/.agri_pd-rs/man/agri_pd-rs.1" "${XDG_DATA_HOME}/man/man1/agri_pd-rs.1"
	local AGRI_PD_SH_CONTENT='

# AGRI_PD
if [[ -e "'${XDG_DATA_HOME}'" ]] ; then
{
  export XDG_DATA_HOME="'${XDG_DATA_HOME}'"
}
fi
'
  cd "${USER_HOME}"
  trap 'echo -e "${RED}" && echo "ERROR failed $0:$LINENO _add_variables_to_bashrc_zshrc agri_pd" && echo -e "${RESET}" && return 0' ERR
  Checking "${AGRI_PD_SH_CONTENT}"
  local INITFILE INITFILES="
   .bashrc
   .zshrc
   .bash_profile
   .profile
   .zshenv
   .zprofile
  "
  while read INITFILE; do
  {
    [ -z ${INITFILE} ] && continue
    Checking "${USER_HOME}/${INITFILE}"
    _if_not_contains "${USER_HOME}/${INITFILE}"  "# AGRI_PD" ||  echo "${AGRI_PD_SH_CONTENT}" >> "${USER_HOME}/${INITFILE}"
  }
  done <<< "${INITFILES}"
  # type agri_pd
  Checking "export XDG_DATA_HOME=${XDG_DATA_HOME}" 

	chown -R "${SUDO_USER}" "${XDG_DATA_HOME}/agri_pd-rust"
	chown -R "${SUDO_USER}" "${USER_HOME}/.agri_pd-rs"
	chown -R "${SUDO_USER}" "${XDG_DATA_HOME}/man/man1/"
  echo "check configs:"
	echo ${INITFILES} | xargs | xargs -I {} echo "vim {}"
  echo " "
} # _add_variables_to_bashrc_zshrc


_debian_flavor_install() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  apt update -y
  trap 'echo -e "${RED}" && echo "ERROR err:$_err failed $0:$LINENO _debian_flavor_install agri_pd" && echo -e "${RESET}" && return 0' ERR
  # Batch 1 18.04
  local package packages="
    autoconf
    bison
    build-essential
    libssl-dev
    libyaml-dev
    libreadline6-dev
    zlib1g-dev
    libncurses5-dev
    libffi-dev
  "
  _package_list_installer "${packages}"
  # Batch 2 20.04
  local package packages="
    gcc
    libssl-dev
    libsensors-dev
    clang
    autoconf
    bison
    build-essential
    libssl-dev
    libyaml-dev
    libreadline6-dev
    zlib1g-dev
    libncurses5-dev
    libffi-dev
  "
  if _package_list_installer "${packages}"; then
	{
		echo "Installer returned $?"
	}
	fi
	Checking "needs .ssh setup before using git@git"
  _git_clone "git@github.com:agrivero-ai/processing_data.git" "${USER_HOME}/processing_data" "will_experiments"
	Installing "Torch Package from Jetpack 6 / PyTorch v2.1"
	curl https://forums.developer.nvidia.com/t/pytorch-for-jetson/72048

  local MSG=$(_add_variables_to_bashrc_zshrc)
  echo "${MSG}"
  ensure agri_pd-rs or "Canceling until agri_pd-rs did not install"
  #su - "${SUDO_USER}" -c 'agri_pd install -l'
  #su - "${SUDO_USER}" -c 'agri_pd install 2.6.5'
  #su - "${SUDO_USER}" -c 'agri_pd global 2.6.5'
  #su - "${SUDO_USER}" -c 'agri_pd rehash'
  #ensure ruby or "Canceling until ruby is not working"
  #su - "${SUDO_USER}" -c 'ruby -v'
} # end _debian_flavor_install

_redhat_flavor_install() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  dnf build-dep agri_pd -vy --allowerasing
	yes | dnf copr enable atim/agri_pd-rust
	dnf install agri_pd-rust -y --allowerasing
  # dnf install  -y openssl-devel
  # Batch Fedora 37
  local package packages="
    libyaml
    libyaml-devel
    autoconf
    bison
    bison-devel
    # ruby-build-agri_pd
    openssl1.1
    # openssl1.1-devel-1
    ncurses
    ncurses-devel
    ncurses-c++-libs
    ncurses-compat-libs
    ncurses-libs
    ncurses-static
    ncurses-base
    # ncurses-term conflicts with foot-terminfo
    readline
    readline-static
    readline-devel
    compat-readline5
    compat-readline5-devel
    compat-readline6
    compat-readline6-devel
    zlib
    zlib-devel
    zlibrary-devel
    zlibrary
    libffi
    libffi-devel
    libffi3.1
    # compat-gdbm
    # compat-gdbm-devel
    # compat-gdbm-libs
    gdbm
    gdbm-devel
    gdbm-libs
  "
  _package_list_installer "${packages}"

  local package packages="
    gcc
    openssl-devel
    lm_sensors-devel
    qt5-qtsensors-devel
    qt6-qtsensors-devel
    gvncpulse-devel
    rust-pulse-devel
    notmuch-devel
    pipewire-devel
    rust-pipewire-devel
    pipewire
    pipewire-alsa
    pipewire-gstreamer
    pipewire-libs
    # pipewire-media-session
    pipewire-pulseaudio
    pipewire-utils
    easyeffects
    helvum
    qpwgraph
    # wireplumber
    clang
    notmuch
		pandoc
  "
  if _package_list_installer "${packages}"; then
  {
    echo "Installer returned $?"
  }
  fi
  # ensure brew or "Canceling until brew is installed. try install_brew.bash install_brew.sh"
  # su - "${SUDO_USER}" -c 'brew install readline'
  # su - "${SUDO_USER}" -c 'brew install openssl@1.1'
  _git_clone "https://github.com/greshake/agri_pd-rust.git" "${USER_HOME}/.agri_pd-rs"
  
  _add_variables_to_bashrc_zshrc
  # ensure agri_pd or "Canceling until agri_pd did not install"
  # su - "${SUDO_USER}" -c 'agri_pd install -l'
  # su - "${SUDO_USER}" -c 'agri_pd rehash'
  ensure agri_pd-rs  or "Canceling until agri_pd-rs  is not working"
  # su - "${SUDO_USER}" -c 'ruby -v'
} # end _redhat_flavor_install

_arch_flavor_install() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  echo "Procedure not yet implemented. I don't know what to do."
} # end _readhat_flavor_install

_arch__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _arch_flavor_install
} # end _arch__32

_arch__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _arch_flavor_install
} # end _arch__64

_centos__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _centos__32

_centos__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _centos__64

_debian__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _debian_flavor_install
} # end _debian__32

_debian__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _debian_flavor_install
} # end _debian__64

_fedora__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _fedora__32

_fedora__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  local _parameters="${*-}"
  _redhat_flavor_install "${_parameters-}"
} # end _fedora__64

_fedora_37__64(){
  # trap "echo Error:$?" ERR INT
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  local _parameters="${*-}"
  local -i _err=0
  _redhat_flavor_install "${_parameters-}"
} # end _fedora_37__64

_fedora_39__64(){
  # trap "echo Error:$?" ERR INT
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  local _parameters="${*-}"
  local -i _err=0
  _redhat_flavor_install "${_parameters-}"
} # end _fedora_39__64

_gentoo__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _gentoo__32

_gentoo__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _gentoo__64

_madriva__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _madriva__32

_madriva__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _madriva__64

_suse__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _suse__32

_suse__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _suse__64

_ubuntu__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _debian_flavor_install
} # end _ubuntu__32

_ubuntu__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _debian_flavor_install
} # end _ubuntu__64

_darwin__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  export HOMEBREW_NO_AUTO_UPDATE=1
  ensure brew or "Canceling until brew is installed"
  su - "${SUDO_USER}" -c 'brew install ruby-build'
  _git_clone "https://github.com/agri_pd/agri_pd.git" "${USER_HOME}/.agri_pd"
  _git_clone "https://github.com/agri_pd/ruby-build.git" "${USER_HOME}/.agri_pd/plugins/ruby-build"
  _add_variables_to_bashrc_zshrc
  ensure "${USER_HOME}/.agri_pd/bin/agri_pd" or "Canceling until agri_pd did not install"
  su - "${SUDO_USER}" -c "git -C ${USER_HOME}/.agri_pd/plugins/ruby-build pull"
  su - "${SUDO_USER}" -c "${USER_HOME}/.agri_pd/bin/agri_pd install -l"
  su - "${SUDO_USER}" -c "${USER_HOME}/.agri_pd/bin/agri_pd install 2.6.5"
  su - "${SUDO_USER}" -c "${USER_HOME}/.agri_pd/bin/agri_pd install 2.7.3"
  su - "${SUDO_USER}" -c "${USER_HOME}/.agri_pd/bin/agri_pd install 3.2.2"
  su - "${SUDO_USER}" -c "${USER_HOME}/.agri_pd/bin/agri_pd global 2.7.3"
  su - "${SUDO_USER}" -c "${USER_HOME}/.agri_pd/bin/agri_pd rehash"
  ensure ruby or "Canceling until ruby is not working"
  su - "${SUDO_USER}" -c 'ruby -v'
} # end _darwin__64

_darwin__arm64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _darwin__64
} # end _darwin__arm64

_tar() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  echo "Procedure not yet implemented. I don't know what to do."
} # end tar

_windows__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  echo "Procedure not yet implemented. I don't know what to do."
} # end _windows__64

_windows__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  echo "Procedure not yet implemented. I don't know what to do."
} # end _windows__32
