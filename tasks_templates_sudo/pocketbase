#!/usr/bin/bash

_debian_flavor_install() {
  if (
  install_requirements "linux" "
    unzip
    curl
    wget
    ufw
    nginx
  "
  ); then 
    {
      apt install unzip -y
      apt install nginx -y
    }
  fi
  verify_is_installed "
    unzip
    curl
    wget
    tar
    ufw
    nginx
  "
  local PB_VERSION=0.16.7
  local CODENAME="pocketbase_${PB_VERSION}_linux_amd64.zip"
  local TARGET_URL="https://github.com/pocketbase/pocketbase/releases/download/v${PB_VERSION}/${CODENAME}"
  local DOWNLOADFOLDER="$(_find_downloads_folder)"
  enforce_variable_with_value DOWNLOADFOLDER "${DOWNLOADFOLDER}"
  directory_exists_with_spaces "${DOWNLOADFOLDER}"
  cd "${DOWNLOADFOLDER}"
  _do_not_downloadtwice "${TARGET_URL}" "${DOWNLOADFOLDER}"  "${CODENAME}"
  local UNZIPDIR="${USER_HOME}/_/pocketbase"
  mkdir -p "${UNZIPDIR}"
  # _unzip "${DOWNLOADFOLDER}" "${UNZIPDIR}" "${CODENAME}"
  yes | unzip "${DOWNLOADFOLDER}/${CODENAME}" -d "${UNZIPDIR}"
  echo "Target: ${UNZIPDIR}"
  ls "${UNZIPDIR}"
  # exit 0 
  local PATHTOPOCKETBASE="${UNZIPDIR}/pocketbase"
  local THISIP=$(myip)
  echo -e "${YELLOW} 
  # REF: https://pocketbase.io/docs/going-to-production

  # Upload the binary and anything else related to your remote server, for example using rsync:

  rsync -avz -e ssh  \"${PATHTOPOCKETBASE}\"  \"root@${THISIP}:${PATHTOPOCKETBASE}\"

  # Start a SSH session with your server:

  ssh \"root@${THISIP}\"

  # Start the executable (the --https flag issues a Let's Encrypt certificate):
  
  \"${PATHTOPOCKETBASE}\" serve --http="${THISIP}:80" --https="${THISIP}:443"

  #    Notice that in the above example we are logged in as root which allow us to bind to the privileged 80 and 443 ports.
  #  For non-root users usually you'll need special privileges to be able to do that. You have several options depending on your OS - authbind, setcap, iptables, sysctl, etc. Here is an example using setcap:
  
  setcap 'cap_net_bind_service=+ep' \"${PATHTOPOCKETBASE}\" 
  
  "
  # exit 0 
  touch /usr/lib/systemd/system/pocketbase.service

  echo -e "${CYAN}[Unit]
Description = pocketbase

[Service]
Type           = simple
User           = root
Group          = root
LimitNOFILE    = 4096
Restart        = always
RestartSec     = 5s
StandardOutput = append:${UNZIPDIR}/errors.log
StandardError  = append:${UNZIPDIR}/errors.log
ExecStart      = \"${PATHTOPOCKETBASE}\" serve --http="${THISIP}:8090" --https="${THISIP}:8443"

[Install]
WantedBy = multi-user.target
" 
  ( echo "[Unit]
Description = pocketbase

[Service]
Type           = simple
User           = root
Group          = root
LimitNOFILE    = 4096
Restart        = always
RestartSec     = 5s
StandardOutput = append:${UNZIPDIR}/errors.log
StandardError  = append:${UNZIPDIR}/errors.log
ExecStart      = \"${PATHTOPOCKETBASE}\" serve --http="${THISIP}:8090" --https="${THISIP}:8443"

[Install]
WantedBy = multi-user.target
" > /usr/lib/systemd/system/pocketbase.service
  )
  echo  -e "${RESET}"
  yes | systemctl enable pocketbase.service
  yes | systemctl start pocketbase

  yes | ufw enable
  ufw allow 'Nginx HTTP'
  ufw status numbered
  nginx -t
  systemctl restart nginx
  touch /etc/nginx/sites-enabled/pocketbase.server
  echo -e "${RED}server {
    listen 80;
    server_name ${THISIP};
    client_max_body_size 10M;

    location / {
        # check http://nginx.org/en/docs/http/ngx_http_upstream_module.html#keepalive
        proxy_set_header Connection '';
        proxy_http_version 1.1;
        proxy_read_timeout 360s;

        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;

        # enable if you are serving under a subpath location
        # rewrite /yourSubpath/(.*) /\$1  break;

        proxy_pass http://127.0.0.1:8090;
    }
}
"  
  echo  -e "${RESET}"
  ( yes | echo "server {
    listen 80;
    server_name ${THISIP};
    client_max_body_size 10M;

    location / {
        # check http://nginx.org/en/docs/http/ngx_http_upstream_module.html#keepalive
        proxy_set_header Connection '';
        proxy_http_version 1.1;
        proxy_read_timeout 360s;

        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;

        # enable if you are serving under a subpath location
        # rewrite /yourSubpath/(.*) /\$1  break;

        proxy_pass http://127.0.0.1:8090;
    }
}
" >  /etc/nginx/sites-enabled/pocketbase.server
  )
  yes | nginx -t
  yes | systemctl restart nginx
  systemctl status nginx | head
  curl "${THISIP}"
  echo  -e "${RESET}"
  echo  -e "${YELLOW}"

  echo "
  systemctl start pocketbase
  systemctl status pocketbase
  systemctl status nginx
  "
  echo  -e "${RESET}"
} # end _debian_flavor_install

_redhat_flavor_install() {
  echo "Procedure not yet implemented. I don't know what to do."
} # end _redhat_flavor_install

_arch_flavor_install() {
  echo "Procedure not yet implemented. I don't know what to do."
} # end _readhat_flavor_install

_arch__32() {
  _arch_flavor_install
} # end _arch__32

_arch__64() {
  _arch_flavor_install
} # end _arch__64

_centos__32() {
  _redhat_flavor_install
} # end _centos__32

_centos__64() {
  _redhat_flavor_install
} # end _centos__64

_debian__32() {
  _debian_flavor_install
} # end _debian__32

_debian__64() {
  _debian_flavor_install
} # end _debian__64

_fedora__32() {
  _redhat_flavor_install
} # end _fedora__32

_fedora__64() {
  _redhat_flavor_install
} # end _fedora__64

_gentoo__32() {
  _redhat_flavor_install
} # end _gentoo__32

_gentoo__64() {
  _redhat_flavor_install
} # end _gentoo__64

_madriva__32() {
  _redhat_flavor_install
} # end _madriva__32

_madriva__64() {
  _redhat_flavor_install
} # end _madriva__64

_suse__32() {
  _redhat_flavor_install
} # end _suse__32

_suse__64() {
  _redhat_flavor_install
} # end _suse__64

_ubuntu__32() {
  _debian_flavor_install
} # end _ubuntu__32

_ubuntu__64() {
  _debian_flavor_install
} # end _ubuntu__64

_darwin__64() {
  echo "Procedure not yet implemented. I don't know what to do."
} # end _darwin__64

_darwin__arm64() {
  echo "Procedure not yet implemented. I don't know what to do."
} # end _darwin__arm64

_tar() {
  echo "Procedure not yet implemented. I don't know what to do."
} # end tar

_windows__64() {
  echo "Procedure not yet implemented. I don't know what to do."
} # end _windows__64

_windows__32() {
  echo "Procedure not yet implemented. I don't know what to do."
} # end _windows__32
