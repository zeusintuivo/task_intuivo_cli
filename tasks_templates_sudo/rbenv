#!/usr/bin/env bash
#
# @author Zeus Intuivo <zeus@intuivo.com>
#
_package_list_installer() {
  # trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  local package packages="${@}"
  trap 'echo -e "${RED}" && echo "ERROR failed $0:$LINENO _package_list_installer rbenv" && echo -e "${RESET}" && return 0' ERR

  if ! install_requirements "linux" "${packages}" ; then
  {
    warning "installing requirements. ${CYAN} attempting to install one by one"
    while read package; do
    {
      [ -z ${package} ] && continue
      if ! install_requirements "linux" "${package}" ; then
      {
        _err=$?
        if [ ${_err} -gt 0 ] ; then
        {
          echo -e "${RED}"
          echo failed to install requirements "${package}"
          echo -e "${RESET}"
        }
        fi
      }
      fi
    }
    done <<< "${packages}"
  }
  fi
} # end _package_list_installer

_git_clone() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  trap 'echo -e "${RED}" && echo "ERROR failed $0:$LINENO  _git_clone KERL" && echo -e "${RESET}" && return 0' ERR
  local _source="${1}"
  local _target="${2}"
  Checking "${SUDO_USER}" "${_target}"
  pwd
  if  it_exists_with_spaces "${_target}" ; then # && it_exists_with_spaces "${_target}/.git" ; then
  {
    if it_exists_with_spaces "${_target}/.git" ; then
    {
      cd "${_target}"
      if git config pull.rebase false ; then
			{
				warning Could not git config pull.rebase false
			}
			fi
      if git fetch  ; then
			{
				warning Could not git fetch
			}
			fi
      if git pull  ; then
			{
				warning Could not git pull
			}
			fi
    }
    fi
  }
  else
  {
    if git clone "${_source}" "${_target}"  ; then
		{
			warning Could not git clone "${_source}" "${_target}"
		}
		fi
  }
  fi
  chown -R "${SUDO_USER}" "${_target}"

} # end _git_clone



_add_variables_to_bashrc_zshrc(){
  local RBENV_SH_CONTENT='

# RBENV
if [[ -e "'${USER_HOME}'/.rbenv" ]] ; then
{
  export RBENV_ROOT="'${USER_HOME}'/.rbenv"
  export PATH="'${USER_HOME}'/bin:${PATH}"
  export PATH="'${USER_HOME}'/.rbenv/bin:${PATH}"
  eval "$(rbenv init -)"
}
fi
'
  trap 'echo -e "${RED}" && echo "ERROR failed $0:$LINENO _add_variables_to_bashrc_zshrc rbenv" && echo -e "${RESET}" && return 0' ERR
  Checking "${RBENV_SH_CONTENT}"
  local INITFILE INITFILES="
   .bashrc
   .zshrc
   .bash_profile
   .profile
   .zshenv
   .zprofile
  "
  while read INITFILE; do
  {
    [ -z ${INITFILE} ] && continue
    Checking "${USER_HOME}/${INITFILE}"
    _if_not_contains "${USER_HOME}/${INITFILE}"  "# RBENV" ||  echo "${RBENV_SH_CONTENT}" >> "${USER_HOME}/${INITFILE}"
    _if_not_contains "${USER_HOME}/${INITFILE}"  "RBENV_ROOT" ||  echo "${RBENV_SH_CONTENT}" >> "${USER_HOME}/${INITFILE}"
    _if_not_contains "${USER_HOME}/${INITFILE}"  "rbenv init" ||  echo "${RBENV_SH_CONTENT}" >> "${USER_HOME}/${INITFILE}"
  }
  done <<< "${INITFILES}"
  # type rbenv
  Checking "export PATH=\"${USER_HOME}/.rbenv/bin:${PATH}\" "
  export PATH="${USER_HOME}/.rbenv/bin:${PATH}"
  chown -R "${SUDO_USER}" "${USER_HOME}/.rbenv"
  cd "${USER_HOME}/.rbenv/bin"
  eval "$("${USER_HOME}"/.rbenv/bin/rbenv init -)"

  # rbenv doctor
  # rbenv install -l
  # rbenv install 2.6.5
  # rbenv global 2.6.5
  # rbenv rehash
  # ruby -v

} # _add_variables_to_bashrc_zshrc


_debian_flavor_install() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  apt update -y
  trap 'echo -e "${RED}" && echo "ERROR err:$_err failed $0:$LINENO _debian_flavor_install rbenv" && echo -e "${RESET}" && return 0' ERR
  # Batch 1 18.04
  local package packages="
    autoconf
    bison
    build-essential
    libssl-dev
    libyaml-dev
    libreadline6-dev
    zlib1g-dev
    libncurses5-dev
    libffi-dev
    libgdbm5
    libgdbm-dev
  "
  _package_list_installer "${packages}"
  # Batch 2 20.04
  local package packages="
    autoconf
    bison
    build-essential
    libssl-dev
    libyaml-dev
    libreadline6-dev
    zlib1g-dev
    libncurses5-dev
    libffi-dev
    libgdbm6
    libgdbm-dev
  "
  _package_list_installer "${packages}"
  _git_clone "https://github.com/rbenv/rbenv.git" "${USER_HOME}/.rbenv"
  _git_clone "https://github.com/rbenv/ruby-build.git" "${USER_HOME}/.rbenv/plugins/ruby-build"
  local MSG=$(_add_variables_to_bashrc_zshrc)
  echo "${MSG}"
  ensure rbenv or "Canceling until rbenv did not install"
  su - "${SUDO_USER}" -c 'rbenv install -l'
  su - "${SUDO_USER}" -c 'rbenv install 2.6.5'
  su - "${SUDO_USER}" -c 'rbenv global 2.6.5'
  su - "${SUDO_USER}" -c 'rbenv rehash'
  ensure ruby or "Canceling until ruby is not working"
  su - "${SUDO_USER}" -c 'ruby -v'
} # end _debian_flavor_install

_redhat_flavor_install() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  dnf build-dep rbenv -vy --allowerasing
  # dnf install  -y openssl-devel
  # Batch Fedora 37
  local package packages="
    libyaml
    libyaml-devel
    autoconf
    bison
		bison-devel
    ruby-build-rbenv
    openssl1.1
    openssl1.1-devel-1
		ncurses
    ncurses-devel
		ncurses-c++-libs
		ncurses-compat-libs
		ncurses-libs
		ncurses-static
		ncurses-base
		# ncurses-term conflicts with foot-terminfo
    readline
		readline-static
		readline-devel
		compat-readline5
		compat-readline5-devel
		compat-readline6
		compat-readline6-devel
    zlib
		zlib-devel
    zlibrary-devel
    zlibrary
		libffi
    libffi-devel
		libffi3.1
    # compat-gdbm
		# compat-gdbm-devel
    # compat-gdbm-libs
		gdbm
		gdbm-devel
		gdbm-libs
  "
  _package_list_installer "${packages}"

	ensure brew or "Canceling until brew is installed. try install_brew.bash install_brew.sh"
	su - "${SUDO_USER}" -c 'brew install readline'
	su - "${SUDO_USER}" -c 'brew install openssl@1.1'
  _git_clone "https://github.com/rbenv/rbenv.git" "${USER_HOME}/.rbenv"
  _git_clone "https://github.com/rbenv/ruby-build.git" "${USER_HOME}/.rbenv/plugins/ruby-build"
  _add_variables_to_bashrc_zshrc
  ensure rbenv or "Canceling until rbenv did not install"
  su - "${SUDO_USER}" -c 'rbenv install -l'
  su - "${SUDO_USER}" -c 'rbenv install 2.6.5'
  su - "${SUDO_USER}" -c 'rbenv install 2.7.3'
  su - "${SUDO_USER}" -c 'rbenv install 3.2.2'
  su - "${SUDO_USER}" -c 'rbenv global 2.6.5'
  su - "${SUDO_USER}" -c 'rbenv rehash'
  ensure ruby or "Canceling until ruby is not working"
  su - "${SUDO_USER}" -c 'ruby -v'
} # end _redhat_flavor_install

_arch_flavor_install() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  echo "Procedure not yet implemented. I don't know what to do."
} # end _readhat_flavor_install

_arch__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _arch_flavor_install
} # end _arch__32

_arch__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _arch_flavor_install
} # end _arch__64

_centos__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _centos__32

_centos__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _centos__64

_debian__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _debian_flavor_install
} # end _debian__32

_debian__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _debian_flavor_install
} # end _debian__64

_fedora__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _fedora__32

_fedora__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  local _parameters="${*-}"
	_redhat_flavor_install "${_parameters-}"
} # end _fedora__64

_fedora_37__64(){
  # trap "echo Error:$?" ERR INT
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  local _parameters="${*-}"
  local -i _err=0
	_redhat_flavor_install "${_parameters-}"
} # end _fedora_37__64

_fedora_39__64(){
  # trap "echo Error:$?" ERR INT
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  local _parameters="${*-}"
  local -i _err=0
	_redhat_flavor_install "${_parameters-}"
} # end _fedora_39__64

_gentoo__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _gentoo__32

_gentoo__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _gentoo__64

_madriva__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _madriva__32

_madriva__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _madriva__64

_suse__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _suse__32

_suse__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _redhat_flavor_install
} # end _suse__64

_ubuntu__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _debian_flavor_install
} # end _ubuntu__32

_ubuntu__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _debian_flavor_install
} # end _ubuntu__64

_darwin__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  export HOMEBREW_NO_AUTO_UPDATE=1
  ensure brew or "Canceling until brew is installed"
  su - "${SUDO_USER}" -c 'brew install ruby-build'
  _git_clone "https://github.com/rbenv/rbenv.git" "${USER_HOME}/.rbenv"
  _git_clone "https://github.com/rbenv/ruby-build.git" "${USER_HOME}/.rbenv/plugins/ruby-build"
  _add_variables_to_bashrc_zshrc
  ensure "${USER_HOME}/.rbenv/bin/rbenv" or "Canceling until rbenv did not install"
  su - "${SUDO_USER}" -c "git -C ${USER_HOME}/.rbenv/plugins/ruby-build pull"
  su - "${SUDO_USER}" -c "${USER_HOME}/.rbenv/bin/rbenv install -l"
  su - "${SUDO_USER}" -c "${USER_HOME}/.rbenv/bin/rbenv install 2.6.5"
  su - "${SUDO_USER}" -c "${USER_HOME}/.rbenv/bin/rbenv install 2.7.3"
  su - "${SUDO_USER}" -c "${USER_HOME}/.rbenv/bin/rbenv install 3.2.2"
  su - "${SUDO_USER}" -c "${USER_HOME}/.rbenv/bin/rbenv global 2.7.3"
  su - "${SUDO_USER}" -c "${USER_HOME}/.rbenv/bin/rbenv rehash"
  ensure ruby or "Canceling until ruby is not working"
  su - "${SUDO_USER}" -c 'ruby -v'
} # end _darwin__64

_darwin__arm64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _darwin__64
} # end _darwin__arm64

_tar() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  echo "Procedure not yet implemented. I don't know what to do."
} # end tar

_windows__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  echo "Procedure not yet implemented. I don't know what to do."
} # end _windows__64

_windows__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  echo "Procedure not yet implemented. I don't know what to do."
} # end _windows__32
