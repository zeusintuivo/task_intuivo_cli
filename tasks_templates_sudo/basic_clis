#!/usr/bin/env bash
#
# @author Zeus Intuivo <zeus@intuivo.com>
#
_package_list_installer() {
  # trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  local package packages="${@}"
  trap 'echo -e "${RED}" && echo "ERROR failed $0:$LINENO _package_list_installer i3status" && echo -e "${RESET}" && return 0' ERR

  if ! install_requirements "linux" "${packages}" ; then
  {
    warning "installing requirements. ${CYAN} attempting to install one by one"
    while read package; do
    {
      [ -z ${package} ] && continue
      if ! install_requirements "linux" "${package}" ; then
      {
        _err=$?
        if [ ${_err} -gt 0 ] ; then
        {
          echo -e "${RED}"
          echo failed to install requirements "${package}"
          echo -e "${RESET}"
        }
        fi
      }
      fi
    }
    done <<< "${packages}"
  }
  fi
} # end _package_list_installer

_git_clone() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  trap 'echo -e "${RED}" && echo "ERROR failed $0:$LINENO  _git_clone I3STATUS" && echo -e "${RESET}" && return 0' ERR
  local _source="${1}"
  local _target="${2}"
  Checking "${SUDO_USER}" "${_target}"
  local _cwd="$(pwd)"
  Checking "_cwd:${_cwd}"
  if  it_exists_with_spaces "${_target}" ; then # && it_exists_with_spaces "${_target}/.git" ; then
  {
    if it_exists_with_spaces "${_target}/.git" ; then
    {
      cd "${_target}"
      if git branch --set-upstream-to=origin/master master ; then
      {
        warning "Could not do git branch --set-upstream-to=origin/master master"
      }
      fi
      if git branch --set-upstream-to=origin/main main ; then
      {
        warning "Could not do git branch --set-upstream-to=origin/main main"
      }
      fi
      if git config pull.rebase false ; then
      {
        warning "Could not git config pull.rebase false"
      }
      fi
      if git fetch  ; then
      {
        warning Could not git fetch
      }
      fi
      if git pull  ; then
      {
        warning Could not git pull
      }
      fi
    }
    fi
  }
  else
  {
    if git clone "${_source}" "${_target}"  ; then
    {
      warning Could not git clone "${_source}" "${_target}"
    }
    else
		{
      if git branch --set-upstream-to=origin/master master ; then
      {
        warning "Could not do git branch --set-upstream-to=origin/master master"
      }
      fi
      if git branch --set-upstream-to=origin/main main ; then
      {
        warning "Could not do git branch --set-upstream-to=origin/main main"
      }
      fi
      if git config pull.rebase false ; then
      {
        warning "Could not git config pull.rebase false"
      }
      fi
		}
    fi
  }
  fi
  chown -R "${SUDO_USER}" "${_target}"
  cd "${_cwd}"
} # end _git_clone




_do_cloning_basic_clis(){
  local _list_clis="
    bash_intuivo_cli
    bin
    docker_intuivo_cli
    execute_command_intuivo_cli
    git_intuivo_cli
    journal_intuivo_cli
    ssh_intuivo_cli
    task_intuivo_cli
  "
  local _one=""
	mkdir -p "${USER_HOME}/_/clis"
  while read -r _one ; do
  {
    [[ -z "${_one}" ]] && continue   # skip if is empty
    [[ "${_one}" == "execute_command_intuivo_cli" ]] && continue
		Installing "${_one}"
	  anounce_command cd "${USER_HOME}/_/clis"
    _git_clone "https://github.com/zeusintuivo/${_one}.git" "${USER_HOME}/_/clis/${_one}"
    wait
		anounce_command cd "${USER_HOME}/_/clis/${_one}"
		if command "${USER_HOME}/_/clis/bash_intuivo_cli/link_folder_scripts" ; then
    {
        warning could not run link_folder_scripts
    }
    fi
  }
  done <<< "${_list_clis}"
  if [ -f /usr/local/bin/sift ] ; then
  {
    unlink /usr/local/bin/sift # Bug path we need to do something abot this
  }
  fi
 
  if [ -f /usr/local/bin/pt ] ; then
  {
    unlink /usr/local/bin/pt # Bug path we need to do something abot this
  }
  fi
  if [ -f /usr/local/bin/ag ] ; then
  {
    unlink /usr/local/bin/ag # Bug path we need to do something abot this
  }
  fi
  if [[ ! -L "/usr/local/bin/added" ]] ; then
  {
    passed clis: git_intuivo_cli/en folder exists and is linked
  }
  else
  {
    Configuring extra work git_intuivo_cli/en
    directory_exists_with_spaces "${USER_HOME}/_/clis/git_intuivo_cli/en"
    cd "${USER_HOME}/_/clis/git_intuivo_cli/en"
    if command "${USER_HOME}/_/clis/bash_intuivo_cli/link_folder_scripts" ; then
    {
      warning could not run link_folder_scripts
    }
    fi
  }
  fi

} # end _do_cloning_basic_clis

_arch__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _do_cloning_basic_clis
} # end _arch__32

_arch__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _do_cloning_basic_clis
} # end _arch__64

_centos__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _do_cloning_basic_clis
} # end _centos__32

_centos__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _do_cloning_basic_clis
} # end _centos__64

_debian__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _do_cloning_basic_clis
} # end _debian__32

_debian__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _do_cloning_basic_clis
} # end _debian__64

_fedora__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _do_cloning_basic_clis
} # end _fedora__32

_fedora__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  local _parameters="${*-}"
  _do_cloning_basic_clis "${_parameters-}"
} # end _fedora__64

_fedora_37__64(){
  # trap "echo Error:$?" ERR INT
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  local _parameters="${*-}"
  local -i _err=0
  _do_cloning_basic_clis "${_parameters-}"
} # end _fedora_37__64

_fedora_39__64(){
  # trap "echo Error:$?" ERR INT
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  local _parameters="${*-}"
  local -i _err=0
  _do_cloning_basic_clis "${_parameters-}"
} # end _fedora_39__64

_gentoo__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _do_cloning_basic_clis
} # end _gentoo__32

_gentoo__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _do_cloning_basic_clis
} # end _gentoo__64

_madriva__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _do_cloning_basic_clis
} # end _madriva__32

_madriva__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _do_cloning_basic_clis
} # end _madriva__64

_suse__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _do_cloning_basic_clis
} # end _suse__32

_suse__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _do_cloning_basic_clis
} # end _suse__64

_ubuntu__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _do_cloning_basic_clis
} # end _ubuntu__32

_ubuntu__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  local package packages="
    git 
		curl
		openssl
    tree
  "
  _package_list_installer "${packages}"
  _do_cloning_basic_clis
} # end _ubuntu__64

_ubuntu__aarch64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  _do_cloning_basic_clis
} # end _ubuntu__aarch64


_darwin__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  export HOMEBREW_NO_AUTO_UPDATE=1
  trap 'echo -e "${RED}" && echo "ERROR err:$_err failed $0:$LINENO _darwin__64 kerl" && echo -e "${RESET}" && return 0' ERR
  local package packages="
    wget
    openssl
    wxWidgets
    fop
    libxslt
  "
  _package_list_installer "${packages}"
  _do_cloning_basic_clis
} # end _darwin__64

_darwin__arm64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  export HOMEBREW_NO_AUTO_UPDATE=1
  trap 'echo -e "${RED}" && echo "ERROR err:$_err failed $0:$LINENO _darwin__arm64 kerl" && echo -e "${RESET}" && return 0' ERR
  local package packages="
    wget
    openssl
    wxWidgets
    fop
    libxslt
  "
  _package_list_installer "${packages}"
  _do_cloning_basic_clis
} # end _darwin__arm64

_tar() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  echo "Procedure not yet implemented. I don't know what to do."
} # end tar

_windows__64() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  echo "Procedure not yet implemented. I don't know what to do."
} # end _windows__64

_windows__32() {
  trap  '_trap_on_error $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  ERR
  echo "Procedure not yet implemented. I don't know what to do."
} # end _windows__32
