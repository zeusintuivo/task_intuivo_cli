#!/usr/bin/bash

_debian_flavor_install() {
  sudo apt install git gcc g++ cmake libjsoncpp-dev uuid-dev openssl libssl-dev zlib1g-dev -y
  echo "Procedure not yet implemented. I don't know what to do."
} # end _debian_flavor_install

_redhat_flavor_install() {
  sudo dnf install git gcc gcc-c++ cmake libuuid-devel openssl-devel zlib-devel  -y
  cd $USER_HOME
	git clone https://github.com/drogonframework/drogon 
  cd drogon
  git submodule update --init
  mkdir build
  cd build
	cmake ..
  make && sudo make install
  echo "WIP."
} # end _redhat_flavor_install

_arch_flavor_install() {
  echo "Procedure not yet implemented. I don't know what to do."
} # end _readhat_flavor_install

_gentoo_flavor_install(){
  sudo emerge dev-vcs/git jsoncpp ossp-uuid openssl -y
  echo "Procedure not yet implemented. I don't know what to do."

}

_arch__32() {
  _arch_flavor_install
} # end _arch__32

_arch__64() {
  _arch_flavor_install
} # end _arch__64

_centos__32() {
  _redhat_flavor_install
} # end _centos__32

_centos__64() {
  _redhat_flavor_install
} # end _centos__64

_debian__32() {
  _debian_flavor_install
} # end _debian__32

_debian__64() {
  _debian_flavor_install
} # end _debian__64

_fedora__32() {
  _redhat_flavor_install
} # end _fedora__32

_fedora__64() {
  _redhat_flavor_install
} # end _fedora__64


_gentoo__32() {
  sudo emerge dev-vcs/git jsoncpp ossp-uuid openssl
  
  _gentoo_flavor_install
} # end _gentoo__32

_gentoo__64() {
  sudo emerge dev-vcs/git jsoncpp ossp-uuid openssl
  _gentoo_flavor_install
} # end _gentoo__64

_fundoo__64() {
  sudo emerge dev-vcs/git jsoncpp ossp-uuid openssl
  _gentoo_flavor_install
} # end _fundoo__64

_fundoo__32() {
  sudo emerge dev-vcs/git jsoncpp ossp-uuid openssl
  _gentoo_flavor_install
} # end _fundoo__32


_madriva__32() {
  _redhat_flavor_install
} # end _madriva__32

_madriva__64() {
  _redhat_flavor_install
} # end _madriva__64

_suse__32() {
  _redhat_flavor_install
} # end _suse__32

_suse__64() {
  _redhat_flavor_install
} # end _suse__64

_ubuntu__32() {
  _debian_flavor_install
} # end _ubuntu__32

_ubuntu__64() {
  cd $USER_HOME
	git clone https://github.com/drogonframework/drogon 
  cd drogon
  git submodule update --init
  mkdir build
  cd build
  sudo apt-get install -y  apt-utils tzdata dirmngr gnupg2 lsb-release sudo 
  sudo apt-get install -y  build-essential autoconf automake cmake  curl wget gcc g++ git libtool gzip make unzip mc  \
                        lsb-release wgetpkg-config libboost-all-dev  libjsoncpp-dev libconfig++-dev  libprotobuf-dev \
                        protobuf-compiler libgrpc++-dev libgrpc++1 libgrpc-dev protobuf-compiler-grpc

  sudo apt install cmake -vy
  sudo apt-get install cmake -vy
  sudo apt-get install gddrescue -y
  sudo apt-get install cmake -y
  sudo apt install gcc -y
  sudo apt install g++ -y
  sudo apt install libjsoncpp-dev -y
  sudo apt install libjsoncpp -y
  sudo apt install uuid-dev -y
  sudo apt install libssl-dev -y
  sudo apt install zlib1g-dev -y
  sudo apt install zlib1g -y
  sudo apt-get install postgresql-all -y
  sudo apt-get install postgresql-server-dev -y
  sudo apt install libmariadbclient-dev -y
  sudo apt install libmariadb-dev-compat -y
  sudo apt-get install libsqlite3-dev -y
  sudo apt-get install libhiredis-dev -y
  sudo apt-get install cmake  -y
  sudo apt-get install libhiredis-dev -y
  sudo apt-get install libsqlite3-dev -y
  sudo apt install git gcc g++ cmake libjsoncpp-dev uuid-dev openssl libssl-dev zlib1g-dev -y
  cmake ..
  make && sudo make install
} # end _ubuntu__64

_darwin__arm64() {
  _darwin__64
} # end _darwin__arm64

_darwin__64() {
  Comment 'REF: https://terminalroot.com/drogon-cpp-the-fastest-web-framework-in-the-world/'
  export HOMEBREW_NO_AUTO_UPDATE=1
  export HOMEBREW_PREFIX=/usr/local
  brew install jsoncpp
  brew install libcpuid
  brew install ossp-uuid
  brew install openssl
  brew install zlib
  brew install --build-from-source  --HEAD  zlib
  brew install hiredis
  brew install cmake
  brew install g++
  brew install gpp
  brew install gcc 
  brew install git
  brew install  mongo-c-driver
  brew install  mongo-cxx-driver
  brew install --build-from-source  --HEAD  mongo-c-driver
  brew install --build-from-source  --HEAD  mongo-cxx-driver
  brew install   protobuf-c
  brew install grpc
  brew install googletest
  git clone https://github.com/an-tao/drogon
  cd drogon
  git submodule update --init
  mkdir -p build
  cd build
  make clean
  
  # cmake ..
  # REF: https://github.com/eulerto/pgquarrel/issues/27
  # Fix for -- Could NOT find PostgreSQL (missing: PostgreSQL_INCLUDE_DIR)
  # Fix for -- Could NOT find pg (missing: PG_LIBRARIES PG_INCLUDE_DIRS)
  export PostgreSQL_INCLUDE_DIR=/usr/local/opt/postgresql@12/include
  export PG_LIBRARIES=/usr/local/opt/postgresql@12/lib
  export PG_INCLUDE_DIRS=/usr/local/opt/postgresql@12/include
  cmake -DCMAKE_PREFIX_PATH=/usr/local/opt/postgresql@12 ..

  make && sudo make install

} # end _darwin__64

_tar() {
  echo "Procedure not yet implemented. I don't know what to do."
} # end tar

_windows__64() {
  echo "Procedure not yet implemented. I don't know what to do."
} # end _windows__64

_windows__32() {
  echo "Procedure not yet implemented. I don't know what to do."
} # end _windows__32
