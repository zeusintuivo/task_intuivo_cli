#/usr/bin/env bash
set -u

if ! declare -A test_array > /dev/null 2>&1; then
  echo -e "TIP: Associative arrays are supported (Bash 4.0 and above) only"
fi

function load_global_colors(){
  [[ -z "${BLACK-}" ]] && BLACK="\\033[38;5;16m"
  [[ -z "${BRIGHT_BLUE87-}" ]] && BRIGHT_BLUE87="\\033[38;5;87m"
  [[ -z "${CYAN-}" ]] && CYAN="\\033[38;5;123m"
  [[ -z "${GRAY241-}" ]] && GRAY241="\\033[38;5;241m"
  [[ -z "${GREEN-}" ]] && GREEN="\\033[38;5;22m"
  [[ -z "${PURPLE_BLUE-}" ]] && PURPLE_BLUE="\\033[38;5;93m"
  [[ -z "${PURPLE-}" ]] && PURPLE="\\033[01;35m"
  [[ -z "${RED-}" ]] && RED="\\033[38;5;1m"
  [[ -z "${RESET_PROMPT-}" ]] && RESET_PROMPT="[0m"
  [[ -z "${RESET-}" ]] && RESET="\\033[0m"
  [[ -z "${YELLOW220-}" ]] && YELLOW220="\\033[38;5;220m"
  [[ -z "${YELLOW226-}" ]] && YELLOW226="\\033[38;5;226m"
  [[ -z "${YELLOW-}" ]] && YELLOW="\\033[01;33m"
} # end load_global_colors
load_global_colors


function _perform_rebase_push(){
  local -i _err=0

  # get parameter
  local _target_file_source="${1-}"
  _err=$?
  if [ ${_err} -gt 0 ] || [[ -z "${_target_file_source}" ]] || [[ ! -f "${_target_file_source}"  ]] ; then
    [ ${_err} -gt 0 ] && echo -e "Error err:${_err}"
    [[ -z "${_target_file_source}" ]] && echo -e "Error empty parameter "
    [[ ! -f "${_target_file_source}"  ]] && echo -e "Error file not found " 
    echo -e "Error getting _target_file_source=${_target_file_source-} parameter. Better check that: stepper_file_csv ${*}"
    exit ${_err}
  fi
  echo -e "${PURPLE-} # _target_file_source${PURPLE_BLUE-}:${RED-}${_target_file_source}${RESET-}"

  # pull current branch
  # local _pull_current_branch="$(git rev-parse --abbrev-ref HEAD 2>&1)";
  # _err=$?
  # if [ ${_err} -gt 0 ]; then
  #  echo -e "Error getting _pull_current_branch. Better check that: ${_pull_current_branch}"
  #  exit ${_err}
  # fi

# 1.description       # 2.local variable   # 3.action                                                         # 4.condition1   # 5.condition2  # 6.fallbackaction  # 7. flag_step_success 
  local _steps __default_steps="
# get parameter       |TARGET_BRANCH       |echo -n \"${1:-main}\"                                           | | | |
# pull current branch |_pull_current_branch|git rev-parse --abbrev-ref HEAD                                  |4|5|6|.step_current_branch
#1|2 var|3 action                    |4 cond1|5 cond2|6.fbk action|7flag 
1||sudo updatedb &                   |       |       |            |.fed37_step_1_updatedb 
2||sudo dnf update -y                |       |       |            |.fed37_step_2_update  
3||sudo dnf build-dep zsh -y         |       |       |            |.fed37_step_3_build_zsh
4||sudo dnf install zsh -y           |       |       |            |.fed37_step_4_zsh
5||sudo dnf build-dep vim-enhanced -y|       |       |            |.fed37_step_5_build_vim
6||sudo dnf install vim-enhanced -y  |       |       |            |.fed37_step_6_vim
7||install_basic_clis.bash           |       |       |            |.fed37_step_7_basic_clis
8||install_beyondcompare.bash        |       |       |            |.fed37_step_8_install_beyondcompare
9||install_powerlevel10k.bash        |       |       |            |.fed37_step_9_install_powerlevel10k
10||install_brew.bash                |       |       |            |.fed37_step_10_install_brew
11||install_rbenv.bash               |       |       |            |.fed37_step_11_install_rbenv
12||install_nvm.bash                 |       |       |            |.fed37_step_12_install_nvm
13||install.clis.bash                |       |       |            |.fed37_step_13_install.clis
14||install_clis.bash                |       |       |            |.fed37_step_14_install_clis
15||install_1password.bash           |       |       |            |.fed37_step_15_install_1password
16||install_zoom.bash                |       |       |            |.fed37_step_16_install_zoom
17||install_keybase.bash             |       |       |            |.fed37_step_17_install_keybase
18||install_drogon.bash              |       |       |            |.fed37_step_18_install_drogon
19||install_sublime_dev.sh.bash      |       |       |            |.fed37_step_19_install_sublime_dev
20||install_sublimemerge_dev.bash    |       |       |            |.fed37_step_20_install_sublimemerge_dev
21||install_sublime4.bash            |       |       |            |.fed37_step_21_install_sublime4
22||install_taskwarrior.bash         |       |       |            |.fed37_step_22_install_taskwarrior
23||compile_nano.bash                |       |       |            |.fed37_step_23_compile_nano
24||install_evm.bash                 |       |       |            |.fed37_step_24_install_evm
25||install_pyenv.bash               |       |       |            |.fed37_step_25_install_pyenv
26||install_kiex.bash                |       |       |            |.fed37_step_26_install_kiex
27||install_emacs.bash               |       |       |            |.fed37_step_27_install_emacs
28||install_masterpdf.bash           |       |       |            |.fed37_step_28_install_masterpdf
29||install_i3.bash                  |       |       |            |.fed37_step_29_install_i3
30||install_vlc.bash                 |       |       |            |.fed37_step_30_install_vlc
31||install_go.bash                  |       |       |            |.fed37_step_31_install_go
32||install_discord.bash             |       |       |            |.fed37_step_32_install_discord
33||install_signal.bash              |       |       |            |.fed37_step_33_install_signal
34||install_skype.bash               |       |       |            |.fed37_step_34_install_skype
35||install_kerl.bash                |       |       |            |.fed37_step_35_install_kerl
36||install_planner.bash             |       |       |            |.fed37_step_36_install_planner
37||install_telegram.bash            |       |       |            |.fed37_step_37_install_telegram
38||install_valet.bash               |       |       |            |.fed37_step_38_install_valet
39||install_code.bash                |       |       |            |.fed37_step_39_install_code
40||wget --max-redirect=10 --mirror -O code-1.84.2-20231122.el7.x86_64.rpm --no-check-certificate https://update.code.visualstudio.com/1.84.2/linux-rpm-x64/stable
3-1||sudo dnf build-dep pipewire -y    |       |       |            |.fed37_step_3-1_build_pipewire
3-2||sudo dnf install pipewire wireplumber pipewire-pulseaudio -y  --allowerasing  |       |       |            |.fed37_step_3-2_pipewire
3-3||sudo dnf swap --allowerasing pulseaudio pipewire-pulseaudio -y    |       |       |            |.fed37_step_3-3_swap_pipewire
41||sudo dnf install -vy code-1.84.2-20231122.el7.x86_64.rpm |       |       |            |.fed37_step_41_code
42||rm -rf code-1.84.2-20231122.el7.x86_64.rpm  ||||.fed37_step_42_rm_code
43||install_rust.bash ||||.fed37_step_43_rust
44||sudo dnf install https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm||||.fed37_step_44_rpmfusion
45||sudo dnf groupupdate core -y ||||.fed37_step_45_core
46||sudo dnf group update core -y ||||.fed37_step_46_core
47||sudo dnf install https://rpms.remirepo.net/fedora/remi-release-$(rpm -E %fedora).rpm -yv  ||||.fed37_step_47_remi
48||sudo dnf build-dep yakuake -y    |       |       |            |.fed37_step_48_build_yakuake
49||sudo dnf build-dep guake -y    |       |       |            |.fed37_step_49_build_guake
50||sudo dnf install -y arandr                ||||.fed37_step_50_arandr
51||sudo dnf install -y task                  ||||.fed37_step_51_task
52||sudo dnf install -y gparted               ||||.fed37_step_52_gparted
53||sudo dnf install -y gpart                 ||||.fed37_step_53_gpart
54||sudo dnf install -y thunderbird           ||||.fed37_step_54_thunderbird
55||sudo dnf install -y boxes                 ||||.fed37_step_55_boxes
56||sudo dnf install -y firefox               ||||.fed37_step_56_firefox
57||sudo dnf install -y guake                 ||||.fed37_step_57_guake
58||sudo dnf install -y yakuake               ||||.fed37_step_58_yakuake
59||sudo dnf install -y nginx                 ||||.fed37_step_59_nginx
60||sudo dnf install -y gnome-tweaks          ||||.fed37_step_60_gnome
61||sudo dnf install -y breeze-cursor-theme   ||||.fed37_step_61_breeze
62||sudo dnf install -y oxygen-cursor-themes  ||||.fed37_step_62_oxygen
63||sudo dnf install -y knock                 ||||.fed37_step_63_knock
64||sudo dnf install -y htop                  ||||.fed37_step_64_htop
65||sudo dnf install -y btop                  ||||.fed37_step_65_btop
66||brew install libxscrnsaver libnotify bzip2 freetype2 ||||.fed37_step_66_brew_installs
"
   _steps="${__default_steps}"
  [[ -e  "${_target_file_source}" ]] && _steps="$(<"${_target_file_source}")"
  # [[ -e .actions/rebasepull ]] && _steps="$(sed 's/TARGET_BRANCH/'${TARGET_BRANCH}'/g' <<< "${_steps}" | sed 's/_pull_current_branch/'${_pull_current_branch}'/g')"
  # (( DEBUG:- )) && echo -e "${_steps}"
  # (( DEBUG:- )) && exit 0
  local _one _description _local_variable _msg _msg2 _action _failed _cond1 _cond1 _fallback _step_file
  while read -r _one ; do
  {
    [[ -z "${_one}" ]] && continue # skip ignored or empty lines
    _description="$(cut -d'|' -f1 <<<"${_one}")"
    _local_variable="$(cut -d'|' -f2 <<<"${_one}" | xargs)"
    _action="$(cut -d'|' -f3 <<<"${_one}")"
    _cond1="$(cut -d'|' -f4 <<<"${_one}")"
    _cond2="$(cut -d'|' -f5 <<<"${_one}")"
    _fallback="$(cut -d'|' -f6 <<<"${_one}")"
    _step_file="$(cut -d'|' -f7 <<<"${_one}")"

    [[ -z "${_action}" ]] && continue  # skip no actions
    if [[ -n "${_step_file}" ]] && [[ -e "${_step_file}" ]] ; then  # skip when step file present
    {
      echo -e "${PURPLE-} # ${_description} ${YELLOW226-} -- skipping  ${GRAY241-} already made ${RED} ${_step_file} ${RESET-}"
      continue
    }
    fi
    echo -e "${PURPLE-} # ${_description}  ${RESET-}"
    echo -e "${GRAY241-}   \____ ${YELLOW226-} ${_action}  ${RESET-}"
    # _msg="$(eval "${_action}" 2>&1)"
    eval "${_action}" 2>&1 |  tee .tmp_msg.log
    _err=$?
    _msg="$(<.tmp_msg.log)"
    if [ ${_err} -gt 0 ]; then
    {
         echo -e "$0 ${RED-} Error doing ${CYAN-}${_description}${PURPLE-}. _fallback: if 1 ${PURPLE-} # ${_cond1} ${RESET-}  if 2 ${PURPLE-} # ${_cond2}  ${RESET-}: _err:${RED} ${_err} was:${CYAN-}${_msg}${RESET-} "
         echo -e "${GRAY241-}   \____ ${YELLOW226-} ${_fallback}  ${RESET-}"
      if [[ -n "${_cond1}" ]] && [[ -n "${_cond2}" ]] && [[ "${_msg}" == *"${_cond1}"* ]] && [[ "${_msg}" == *"${_cond2}"* ]] ; then
      {
         echo -e "$0 ${RED-} Error doing ${CYAN-}${_description}${PURPLE-}. _fallback: if 1 ${PURPLE-} # ${_cond1} ${RESET-}  if 2 ${PURPLE-} # ${_cond2}  ${RESET-}: _err:${RED} ${_err} was:${CYAN-}${_msg}${RESET-} "
         echo -e "${GRAY241-}   \____ ${YELLOW226-} ${_fallback}  ${RESET-}"
        # _msg="$(eval "${_fallback}" 2>&1)"
        eval "${_action}" 2>&1 |  tee .tmp_msg.log
        _err=$?
        _msg="$(<.tmp_msg.log)"
        if [ ${_err} -gt 0 ]; then
        {
          echo -e "$0 ${RED-} Error doing fallback 1 & 2 ${CYAN-}${_description}${PURPLE-}. Better check that: ${CYAN-}${_msg}${RESET-}"
          exit ${_err}
        }
        fi
      }
      elif [[ -n "${_cond1}" ]] && [[ "${_msg}" == *"${_cond1}"* ]] ; then
      {
         echo -e "$0 ${RED-} Error doing ${CYAN-}${_description}${PURPLE-}. _fallback: if 1 ${PURPLE-} # ${_cond1} ${RESET-}: _err:${RED} ${_err} was:${CYAN-}${_msg}${RESET-} "
         echo -e "${GRAY241-}   \____ ${YELLOW226-} ${_fallback}  ${RESET-}"
        _msg="$(eval "${_fallback}")"
        _err=$?
        if [ ${_err} -gt 0 ]; then
        {
          echo -e "$0 ${RED-} Error doing fallback 1 ${CYAN-}${_description}${PURPLE-}. Better check that: ${CYAN-}${_msg}${RESET-}"
          exit ${_err}
        }
        fi

      }
      elif ( [[ -n "${_cond2}" ]] && [[ "${_msg}" == *"${_cond2}"* ]] ); then
      {
         echo -e "$0 ${RED-} Error doing ${CYAN-}${_description}${PURPLE-}. _fallback: if 2 ${PURPLE-} # ${_cond2} ${RESET-}: _err:${RED} ${_err} was:${CYAN-}${_msg}${RESET-} "
         echo -e "${GRAY241-}   \____ ${YELLOW226-} ${_fallback}  ${RESET-}"
        # _msg="$(eval "${_fallback}")"
        eval "${_action}" 2>&1 |  tee .tmp_msg.log
        _err=$?
        _msg="$(<.tmp_msg.log)"
        if [ ${_err} -gt 0 ]; then
        {
          echo -e "$0 ${RED-} Error doing fallback 2 ${CYAN-}${_description}${PURPLE-}. Better check that: ${CYAN-}${_msg}${RESET-}"
          exit ${_err}
        }
        fi
      }
      else
      {
        echo -e "$0 ${RED-} Error doing ${CYAN-}${_description}${PURPLE-}. Better check that: ${CYAN-}${_msg}${RESET-}"
        exit ${_err}
      }
      fi
    }
    fi
    touch "${_step_file}"
    [[ -z "${_local_variable}" ]] && continue  # skip if no variable target provided or empty lines
    _msg2="$(eval "local ${_local_variable}=\"${_msg}\"" 2>&1)"
    _err=$?
    if [ ${_err} -gt 0 ]; then
    {
      echo -e "$0 ${RED-} Assigning value to _local_variable:${CYAN-}${_local_variable}${RED-}  = ${YELLOW226-}value :${CYAN-}${_msg}: ${PURPLE-}. Better check that: ${CYAN-}${_msg2}${RESET-}"
      exit ${_err}
    }
    fi

  }
  done <<< "$(echo "${_steps}" | grep -vE '^#' | grep -vE '^\s+#')" # remove lines starting with #


} # end _perform_rebase_push

_perform_rebase_push ${*-}


function disabled__older__line__by__line_todo_remove_TODO(){

  # get parameter
  local TARGET_BRANCH="${1:-main}"
  _err=$?
  if [ ${_err} -gt 0 ]; then
    echo -e "Error getting TARGET_BRANCH parameter. Better check that: $0 ${*}"
    exit ${_err}
  fi
  echo -e "TARGET_BRANCH:${TARGET_BRANCH}"


  # pull current branch
  local _pull_current_branch="$(git rev-parse --abbrev-ref HEAD 2>&1)";
  _err=$?
  if [ ${_err} -gt 0 ]; then
    echo -e "Error getting _pull_current_branch. Better check that: ${_pull_current_branch}"
    exit ${_err}
  fi

  # fetch target
  echo -e "git fetch -f origin ${TARGET_BRANCH}:${TARGET_BRANCH}"
  git fetch -f origin "${TARGET_BRANCH}":"${TARGET_BRANCH}"
  _err=$?
  if [ ${_err} -gt 0 ]; then
    echo -e "Error doing git fetch -f origin ${TARGET_BRANCH}:${TARGET_BRANCH}. Better check that"
    exit ${_err}
  fi

  # fetch current branch
  echo -e "git fetch "
  git fetch
  _err=$?
  if [ ${_err} -gt 0 ]; then
    echo -e "Error doing git fetch. Better check that"
    exit ${_err}
  fi


  # git rebase
  echo -e "git rebase ${TARGET_BRANCH}"
  git rebase "${TARGET_BRANCH}"

  # set branch stream
  echo -e 'git branch --set-upstream-to=origin/'"${_pull_current_branch}"'  '"${_pull_current_branch}"

  git branch --set-upstream-to=origin/"${_pull_current_branch}"  "${_pull_current_branch}"


  # push forced
  echo -e "git push --force"
  git push --force

  # push upstream
  echo -e "git push --set-upstream origin  ${_pull_current_branch}"
  git push --set-upstream origin  "${_pull_current_branch}"

  # push force again
  echo -e "git push --force"
  git push --force


} # end disabled__older__line__by__line_todo_remove_TODO



